# Digistore24 API - Complete OpenAPI Specification
# 
# This file was automatically generated by scripts/fetch-openapi.php
# Source: https://digistore24.com/api/docs/openapi.yaml
# Generated: 2025-10-15 05:36:32 UTC
# 
# All $ref references have been resolved into this single file.
# Compatible with Postman, Swagger UI, and OpenAPI Generator.
#
# DO NOT EDIT THIS FILE MANUALLY - regenerate using:
# php scripts/fetch-openapi.php
#
---
openapi: 3.0.0
info:
  title: 'Digistore24 API'
  description: 'API for Digistore24 e-commerce platform'
  version: '1.0'
  contact:
    name: 'Digistore24 Support'
    url: 'https://www.digistore24.com/contact'
servers:
  -
    url: 'https://www.digistore24.com/api/call'
    description: 'Production API server'
tags:
  -
    name: 'Account Access'
    description: 'Operations for managing member access to content'
  -
    name: Affiliates
    description: 'Operations for managing affiliate relationships'
  -
    name: 'API Key Management'
    description: 'Operations for managing API keys'
  -
    name: Billing
    description: 'Operations for billing and custom order forms'
  -
    name: 'Buy URLs'
    description: 'Operations for managing customized buy URLs'
  -
    name: Buyers
    description: 'Operations for managing buyer information'
  -
    name: Commissions
    description: 'Operations for managing affiliate commissions'
  -
    name: 'Conversion Tools'
    description: 'Operations for conversion tracking and tools'
  -
    name: Countries
    description: 'Operations for country information'
  -
    name: Currencies
    description: 'Operations for currency information'
  -
    name: 'Custom Forms'
    description: 'Operations for custom form records'
  -
    name: Deliveries
    description: 'Operations for managing product deliveries'
  -
    name: E-Tickets
    description: 'Operations for managing electronic tickets'
  -
    name: 'Fraud Management'
    description: 'Operations for fraud detection and reporting'
  -
    name: Images
    description: 'Operations for managing images'
  -
    name: Invoices
    description: 'Operations for managing invoices'
  -
    name: IPN
    description: 'Operations for Instant Payment Notifications'
  -
    name: Licenses
    description: 'Operations for license validation'
  -
    name: Marketplace
    description: 'Operations for marketplace entries'
  -
    name: 'Order Forms'
    description: 'Operations for managing order forms'
  -
    name: 'Payment Plans'
    description: 'Operations for managing payment plans'
  -
    name: Payments
    description: 'Operations for payment processing'
  -
    name: Payouts
    description: 'Operations for managing payouts'
  -
    name: 'Product Groups'
    description: 'Operations for managing product groups/folders'
  -
    name: Products
    description: 'Operations for managing products'
  -
    name: Purchases
    description: 'Operations for managing purchases and orders'
  -
    name: Rebilling
    description: 'Operations for managing recurring billing'
  -
    name: 'Service Proofs'
    description: 'Operations for service proof requests'
  -
    name: Shipping
    description: 'Operations for shipping cost policies'
  -
    name: 'Smart Upgrades'
    description: 'Operations for smart upgrade functionality'
  -
    name: Statistics
    description: 'Operations for accessing statistics and analytics'
  -
    name: System
    description: 'System operations and utilities'
  -
    name: Tracking
    description: 'Operations for tracking and analytics'
  -
    name: Transactions
    description: 'Operations for managing transactions'
  -
    name: Upgrades
    description: 'Operations for managing product upgrades'
  -
    name: Users
    description: 'Operations for user information'
  -
    name: Vouchers
    description: 'Operations for managing vouchers and coupons'
paths:
  /addBalanceToPurchase:
    post:
      tags:
        - Purchases
      summary: 'Add balance to a purchase'
      description: |
        For subscription and installment payments - add balance to the order.
        This will be billed with the next payments.
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: purchase_id
          in: query
          required: true
          description: 'The Digistore24 order ID'
          schema:
            type: string
        -
          name: amount
          in: query
          required: true
          description: 'The balance to be added in the currency of the order. If amount is <0, the balance will be reduced. The balance cannot be less than 0.'
          schema:
            type: number
            format: float
      responses:
        200:
          description: 'Balance successfully updated'
          content:
            application/json:
              schema:
                type: object
                properties:
                  old_balance: { type: number, description: 'The old balance' }
                  new_balance: { type: number, description: 'The new (current) balance' }
        403:
          description: 'Access denied - Full access required'
        400:
          description: 'Invalid request parameters'
  /copyProduct:
    post:
      tags:
        - Products
      summary: 'Copy a product'
      description: 'Copies a product on Digistore24'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: product_id
          in: query
          required: true
          description: 'The ID of the product to be copied'
          schema:
            type: string
        -
          name: data
          in: query
          required: true
          description: 'Array with product properties to change'
          schema:
            type: object
            properties:
              name_intern:
                type: string
                maxLength: 63
                description: 'Internal product name'
              product_type_id:
                type: integer
                description: 'Product type ID (call getGlobalSettings for valid IDs)'
              language:
                type: string
                description: 'Comma separated list of languages (e.g. en,de)'
                default: "Current vendor's language"
              is_active:
                type: string
                enum:
                  - 'Y'
                  - 'N'
                description: 'Product activation status'
              product_group_id:
                type: integer
                description: 'Product group ID'
              name_de:
                type: string
                maxLength: 63
                description: 'German product name'
              name_en:
                type: string
                maxLength: 63
                description: 'English product name'
              name_es:
                type: string
                maxLength: 63
                description: 'Spanish product name'
      responses:
        200:
          description: 'Product successfully copied'
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_id: { type: integer, description: 'ID of the newly created product copy' }
        403:
          description: 'Access denied - Full access required'
        400:
          description: 'Invalid request parameters'
  /logMemberAccess:
    post:
      tags:
        - 'Account Access'
      summary: 'Log member access to content'
      description: |
        Notifies Digistore that a buyer has logged into their Membership account and accessed the bought content.
        Important for German refund handling - only for purchases without the option to refund (refund_days=0 in IPN).
        Only call this function if the buyer actually has logged in.
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: purchase_id
          in: query
          required: true
          description: 'The ID of the purchase'
          schema:
            type: string
        -
          name: platform_name
          in: query
          required: true
          description: 'The readable name of the membership area (e.g. vip club)'
          schema:
            type: string
        -
          name: login_name
          in: query
          required: true
          description: "The buyer's username for the membership area"
          schema:
            type: string
        -
          name: login_url
          in: query
          required: true
          description: 'The URL the buyer used to login'
          schema:
            type: string
        -
          name: number_of_unlocked_lectures
          in: query
          required: true
          description: 'Number of lectures the member has access to for this purchase'
          schema:
            type: integer
            minimum: 0
        -
          name: total_number_of_lectures
          in: query
          required: true
          description: 'Total number of lectures in the course (unlocked + locked)'
          schema:
            type: integer
            minimum: 0
        -
          name: login_at
          in: query
          required: false
          description: "Date time of login. Defaults to 'now'. Use for batch logging."
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: 'Member access successfully logged'
        403:
          description: 'Access denied - Full access required'
        400:
          description: 'Invalid request parameters'
  /createBillingOnDemand:
    post:
      tags:
        - Billing
      summary: 'Create a customized order form URL'
      description: |
        Creates a special order form URL that can be customized for the visitor.
        Allows customizing customer data, prices, and other settings.
        Requires "Billing on demand" right to be enabled for the vendor account.
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: purchase_id
          in: query
          required: true
          description: 'The reference order. Must have been made with a payment method that supports rebilling.'
          schema:
            type: string
        -
          name: product_id
          in: query
          required: true
          description: 'The product ID in Digistore24'
          schema:
            type: string
        -
          name: payment_plan
          in: query
          required: false
          description: 'Data for the purchase price/payment plan'
          schema:
            type: object
            properties:
              first_amount:
                type: number
                description: 'The purchase price or first payment amount'
              other_amounts:
                type: number
                description: 'Amount of follow-up payments for subscription/installments'
              currency:
                type: string
                minLength: 3
                maxLength: 3
                description: 'Three-character currency code (e.g. EUR or USD)'
              number_of_installments:
                type: integer
                minimum: 1
                description: 'Number of payments including the first'
              first_billing_interval:
                type: string
                description: 'Time interval between purchase and second installment (e.g. "1_month")'
              other_billing_intervals:
                type: string
                description: 'Time interval for second and further payments'
              test_interval:
                type: string
                description: 'Test interval before payment starts (e.g. "1_month")'
              template:
                type: string
                description: 'ID of payment method used as template'
              upgrade_type:
                type: string
                enum:
                  - upgrade
                  - downgrade
                default: upgrade
                description: 'Type of upgrade handling'
        -
          name: tracking
          in: query
          required: false
          description: 'Data for tracking'
          schema:
            type: object
            properties:
              custom:
                type: string
                description: 'Custom value for order reference'
              affiliate:
                type: string
                description: "Affiliate's Digistore24 ID"
              campaignkey:
                type: string
                description: 'Campaign key of the affiliate'
              trackingkey:
                type: string
                description: "Vendor's tracking key"
        -
          name: placeholders
          in: query
          required: false
          description: 'Placeholders for product title and description'
          schema:
            type: object
            additionalProperties:
              type: string
        -
          name: settings
          in: query
          required: false
          description: 'Additional settings for the order form'
          schema:
            type: object
            properties:
              voucher_code:
                type: string
                description: 'Voucher to apply at payment'
              quantity:
                type: integer
                minimum: 1
                default: 1
                description: 'Quantity of the main product'
              product_country:
                type: string
                minLength: 2
                maxLength: 2
                description: 'Two-letter country code for the product'
        -
          name: addons
          in: query
          required: false
          description: 'List of add-on products'
          schema:
            type: array
            items:
              type: object
              properties:
                product_id:
                  type: string
                  description: 'Product ID of the addon'
                first_amount:
                  type: number
                  description: 'First payment amount for subscription/installment'
                other_amounts:
                  type: number
                  description: 'Follow-up payment amounts'
                single_amount:
                  type: number
                  description: 'Purchase amount for single payments'
                quantity:
                  type: integer
                  minimum: 1
                  default: 1
                  description: 'Quantity of the addon'
                currency:
                  type: string
                  minLength: 3
                  maxLength: 3
                  description: 'Three-character currency code'
                is_quantity_editable_after_purchase:
                  type: string
                  enum: ['Y', 'N']
                  default: 'N'
                  description: 'Can buyer change quantity after purchase'
                product_country:
                  type: string
                  minLength: 2
                  maxLength: 2
                  description: 'Two-letter country code for the addon'
      responses:
        200:
          description: 'Order form URL successfully created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_purchase_id: { type: string, description: 'The ID of the new order' }
                  payment_status: { type: string, description: 'The payment status' }
                  payment_status_msg: { type: string, description: 'Payment status in readable form' }
                  billing_status: { type: string, description: 'Status of the new order' }
                  billing_status_msg: { type: string, description: 'Order status in readable form' }
        403:
          description: 'Access denied - Full access required or Billing on demand not enabled'
        400:
          description: 'Invalid request parameters'
  /createAddonChangePurchase:
    post:
      tags:
        - Purchases
      summary: 'Create a package change order'
      description: |
        Creates a package change order to add or remove products from an order.
        The main product's quantity cannot be changed.
        Added products must be subscriptions.
        Requires "Billing on demand" right to be enabled for the vendor account.
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: purchase_id
          in: query
          required: true
          description: 'The reference order. Must have been made with a payment method that supports rebilling.'
          schema:
            type: string
        -
          name: addons
          in: query
          required: true
          description: 'List of add-on products'
          schema:
            type: array
            items:
              type: object
              required:
                - product_id
              properties:
                product_id:
                  type: integer
                  description: 'Digistore24 product ID'
                amount:
                  type: number
                  format: float
                  description: 'The rebilling amount of the subscription'
                quantity:
                  type: integer
                  minimum: 1
                  default: 1
                  description: 'Quantity of the addon'
                is_quantity_editable_after_purchase:
                  type: string
                  enum: ['Y', 'N']
                  default: 'N'
                  description: 'Can buyer change quantity after purchase'
        -
          name: tracking
          in: query
          required: false
          description: 'Data for tracking. Fields not provided are taken from the initial purchase.'
          schema:
            type: object
            properties:
              custom:
                type: string
                description: 'Custom value for order reference'
              affiliate:
                type: string
                description: "Affiliate's Digistore24 ID"
              campaignkey:
                type: string
                description: 'Campaign key of the affiliate'
              trackingkey:
                type: string
                description: "Vendor's tracking key"
        -
          name: placeholders
          in: query
          required: false
          description: 'Placeholders for product title and description'
          schema:
            type: object
            additionalProperties:
              type: string
      responses:
        200:
          description: 'Package change order successfully created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_purchase_id: { type: string, description: 'The ID of the new order' }
                  payment_status: { type: string, description: 'The payment status' }
                  payment_status_msg: { type: string, description: 'Payment status in readable form' }
                  billing_status: { type: string, description: 'Status of the new order' }
                  billing_status_msg: { type: string, description: 'Order status in readable form' }
                  pay_url: { type: string, description: 'URL to restart payments if payment failed' }
        403:
          description: 'Access denied - Full access required or Billing on demand not enabled'
        400:
          description: 'Invalid request parameters'
  /createBuyUrl:
    post:
      tags:
        - 'Buy URLs'
      summary: 'Create a customized order form URL'
      description: |
        Creates a special order form URL that can be customized for the visitor.
        For example, customer data can be entered and set as read-only. Prices can also be changed.
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: product_id
          in: query
          required: true
          description: 'The ID of the product in Digistore24'
          schema:
            type: string
        -
          name: buyer
          in: query
          required: false
          description: 'Buyer data'
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              salutation:
                type: string
                enum:
                  - M
                  - F
                description: 'M (male) or F (female)'
              title:
                type: string
                description: 'e.g. "Prof." or "Dr."'
              last_name:
                type: string
              first_name:
                type: string
              company:
                type: string
              street:
                type: string
              city:
                type: string
              zipcode:
                type: string
              state:
                type: string
              country:
                type: string
                minLength: 2
                maxLength: 2
                description: 'Two-digit country code'
              phone_no:
                type: string
              tax_id:
                type: string
              readonly_keys:
                type: string
                enum:
                  - all
                  - email
                  - email_and_name
                  - none
                default: none
                description: 'Indicates which fields are read-only'
              id:
                type: string
                description: 'Buyer ID or order ID to use existing address'
        -
          name: payment_plan
          in: query
          required: false
          description: 'Purchase price/payment plan data'
          schema:
            type: object
            properties:
              first_amount:
                type: number
                description: 'Purchase price or first payment amount'
              other_amounts:
                type: number
                description: 'Amount for follow-up payments'
              currency:
                type: string
                minLength: 3
                maxLength: 3
                description: 'Three-digit currency code (e.g. EUR or USD)'
              number_of_installments:
                type: integer
                minimum: 0
                default: 1
                description: 'Number of payments (1=single payment, 0=subscription)'
              first_billing_interval:
                type: string
                default: 1_month
                description: 'Time interval between purchase and second installment'
              other_billing_intervals:
                type: string
                description: 'Time interval for second and further payments'
              test_interval:
                type: string
                description: 'Test period before payment starts'
              template:
                type: string
                description: 'ID of payment method template'
              upgrade_order_id:
                type: string
                description: 'Order ID for upgrade purchase'
              upgrade_type:
                type: string
                enum:
                  - upgrade
                  - downgrade
                default: upgrade
                description: 'Type of upgrade'
              tax_mode:
                type: string
                enum:
                  - as_set
                  - exclude
                  - include
                default: as_set
                description: 'Tax calculation mode'
        -
          name: tracking
          in: query
          required: false
          description: 'Tracking data'
          schema:
            type: object
            properties:
              custom:
                type: string
                description: 'Custom value for order reference'
              affiliate:
                type: string
                description: "Affiliate's Digistore24 ID"
              affiliate_priority:
                type: string
                enum:
                  - email
                  - as_set
                default: as_set
                description: 'Priority for affiliate selection'
              campaignkey:
                type: string
                description: 'Campaign key of the affiliate'
              trackingkey:
                type: string
                description: "Vendor's tracking key"
              utm_source:
                type: string
              utm_medium:
                type: string
              utm_campaign:
                type: string
              utm_term:
                type: string
              utm_content:
                type: string
        -
          name: valid_until
          in: query
          required: false
          default: 24h
          description: "Time period until link becomes invalid. Use 'forever' for no expiration."
          schema:
            type: string
        -
          name: urls
          in: query
          required: false
          description: 'Custom URLs'
          schema:
            type: object
            properties:
              thankyou_url:
                type: string
                description: 'Custom thank you page URL'
              fallback_url:
                type: string
                description: 'URL for invalid links'
              upgrade_error_url:
                type: string
                description: 'URL for failed upgrades'
        -
          name: placeholders
          in: query
          required: false
          description: 'Placeholders for product title and description'
          schema:
            type: object
            additionalProperties:
              type: string
        -
          name: settings
          in: query
          required: false
          description: 'Additional order form settings'
          schema:
            type: object
            properties:
              orderform_id:
                type: string
                description: 'ID of the order form'
              img:
                oneOf:
                  - { type: string }
                  - { type: object, additionalProperties: { type: string } }
                description: 'Product image ID or mapping'
              affiliate_commission_rate:
                type: number
                description: 'Affiliate commission percentage'
              affiliate_commission_fix:
                type: number
                description: 'Fixed affiliate commission amount'
              voucher_code:
                type: string
                description: 'Voucher code to apply'
              voucher_1st_rate:
                type: number
                description: 'Discount percentage on first payment'
              voucher_oth_rates:
                type: number
                description: 'Discount percentage on follow-up payments'
              voucher_1st_amount:
                type: number
                description: 'Discount amount on first payment'
              voucher_oth_amounts:
                type: number
                description: 'Discount amount on follow-up payments'
              force_rebilling:
                type: boolean
                description: 'Require payment method supporting automated payments'
              pay_methods:
                type: array
                items:
                  type: string
                  enum: [paypal, sezzle, creditcard, elv, banktransfer, klarna]
                description: 'Allowed payment methods'
        -
          name: addons
          in: query
          required: false
          description: 'List of add-on products'
          schema:
            type: array
            items:
              type: object
              properties:
                product_id:
                  type: string
                  description: 'Product ID of addon'
                first_amount:
                  type: number
                  description: 'First payment amount for subscription/installment'
                other_amounts:
                  type: number
                  description: 'Follow-up payment amounts'
                single_amount:
                  type: number
                  description: 'Purchase amount for single payments'
                default_quantity:
                  type: integer
                  minimum: 1
                  default: 1
                  description: 'Preselected quantity'
                max_quantity_type:
                  type: string
                  enum: [unlimited, like_main_item, number]
                  default: unlimited
                  description: 'Maximum quantity type'
                max_quantity:
                  type: integer
                  minimum: 1
                  description: 'Maximum purchasable quantity'
                currency:
                  type: string
                  minLength: 3
                  maxLength: 3
                  description: 'Three-character currency code'
                is_quantity_editable_before_purchase:
                  type: string
                  enum: ['Y', 'N']
                  default: 'N'
                  description: 'Can buyer change quantity before purchase'
                is_quantity_editable_after_purchase:
                  type: string
                  enum: ['Y', 'N']
                  default: 'N'
                  description: 'Can buyer change quantity after purchase'
      responses:
        200:
          description: 'Buy URL successfully created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string, description: 'ID of the BuyUrl object' }
                  url: { type: string, description: 'Order URL for purchase' }
                  valid_until: { type: string, format: date-time, description: 'Expiration date of the URL' }
                  upgrade_status: { type: string, enum: [none, ok, error], description: 'Status of upgrade possibility' }
        403:
          description: 'Access denied - Full access required'
        400:
          description: 'Invalid request parameters'
  /createImage:
    post:
      tags:
        - Images
      summary: 'Create an image'
      description: 'Creates an image on Digistore24'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: data
          in: query
          required: true
          description: 'Image data and properties'
          schema:
            type: object
            required:
              - name
              - image-url
            properties:
              name:
                type: string
                maxLength: 63
                description: 'Name of the image'
              image-url:
                type: string
                format: uri
                description: 'URL from which Digistore24 copies the image'
              usage_type:
                type: string
                description: "Purpose of the images (e.g. 'product'). See getGlobalSettings() image_usage_type field."
              alt_tag:
                type: string
                description: 'Alternative text for the image'
      responses:
        200:
          description: 'Image successfully created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  image_id: { type: string, description: 'ID of the created image' }
                  image_url: { type: string, format: uri, description: 'URL of the created image on Digistore24' }
        403:
          description: 'Access denied - Full access required'
        400:
          description: 'Invalid request parameters'
  /createEticket:
    post:
      tags:
        - E-Tickets
      summary: 'Create free etickets'
      description: 'Creates free etickets for events'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: buyer
          in: query
          required: true
          description: 'Buyer information'
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              title:
                type: string
              salutation:
                type: string
                enum:
                  - m
                  - f
                description: 'm (male) or f (female)'
              last_name:
                type: string
              first_name:
                type: string
        -
          name: product_id
          in: query
          required: true
          description: 'The product ID'
          schema:
            type: string
        -
          name: location_id
          in: query
          required: true
          description: 'The location ID (see listEticketLocations())'
          schema:
            type: string
        -
          name: template_id
          in: query
          required: true
          description: 'The template ID (see listEticketTemplates())'
          schema:
            type: string
        -
          name: date
          in: query
          required: true
          description: 'Event date'
          schema:
            type: string
            format: date
        -
          name: days
          in: query
          required: false
          description: 'Number of days of the event'
          schema:
            type: integer
            minimum: 1
            default: 1
        -
          name: note
          in: query
          required: false
          description: 'Optional note (e.g. time)'
          schema:
            type: string
        -
          name: count
          in: query
          required: false
          description: 'Number of etickets to create'
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        200:
          description: 'Etickets successfully created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { etickets: { type: array, items: { type: object, properties: { id: { type: string, description: 'ID of the created eticket' }, url: { type: string, format: uri, description: 'URL to download the eticket PDF' }, email: { type: string, format: email, description: 'Email address the ticket was created for' } } } } } }
        403:
          description: 'Access denied - Full access required'
        400:
          description: 'Invalid request parameters'
  /createOrderform:
    post:
      tags:
        - 'Order Forms'
      summary: 'Create an order form'
      description: 'Creates an order form on Digistore24'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: data
          in: query
          required: true
          description: 'Property fields of the order form'
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                maxLength: 63
                description: 'Name of the order form'
              layout:
                type: string
                enum:
                  - widget
                  - legacy
                default: widget
                description: 'Order form layout type (responsive not supported)'
              background_style:
                type: string
                enum:
                  - white
                  - blue
                description: 'Background style'
              step_count:
                type: integer
                enum:
                  - 1
                  - 2
                  - 3
                description: 'Number of steps/tabs in the order form'
              shipping_position:
                type: string
                enum:
                  - after_cart
                  - before_cart
                description: 'Position of shipping details relative to cart'
              summary_positions:
                type: string
                description: 'Comma-separated positions for purchase order summaries (before_playplan,after_payplan,before_checkout,before_pay_button,after_pay_button)'
              flex_elements_order:
                type: string
                enum:
                  - order_bumper
                  - order_summary
                  - refund_waiver
                  - order_bumper
                  - refund_waiver
                  - order_summary
                  - order_summary
                  - order_bumper
                  - refund_waiver
                  - order_summary
                  - refund_waiver
                  - order_bumper
                  - refund_waiver
                  - order_bumper
                  - order_summary
                  - refund_waiver
                  - order_summary
                  - order_bumper
                description: 'Order of elements (order bumper, summary, refund waiver)'
              tab_style:
                type: string
                enum:
                  - bigtabs
                  - image
                  - image_url
                description: 'Style of tabs'
              tab_text_1_hl:
                type: string
                description: 'Title of first tab (for bigtabs)'
              tab_text_1_sl:
                type: string
                description: 'Subtitle of first tab (for bigtabs)'
              tab_text_2_hl:
                type: string
                description: 'Title of second tab (for bigtabs)'
              tab_text_2_sl:
                type: string
                description: 'Subtitle of second tab (for bigtabs)'
              tab_text_3_hl:
                type: string
                description: 'Title of third tab (for bigtabs)'
              tab_text_3_sl:
                type: string
                description: 'Subtitle of third tab (for bigtabs)'
              tab_image_1_id:
                type: string
                description: 'Image ID for tabs when first tab selected'
              tab_image_2_id:
                type: string
                description: 'Image ID for tabs when second tab selected'
              tab_image_3_id:
                type: string
                description: 'Image ID for tabs when third tab selected'
              tab_image_1_url:
                type: string
                format: uri
                description: 'Image URL for tabs when first tab selected (400x80px)'
              tab_image_2_url:
                type: string
                format: uri
                description: 'Image URL for tabs when second tab selected (400x80px)'
              tab_image_3_url:
                type: string
                format: uri
                description: 'Image URL for tabs when third tab selected (400x80px)'
              order_bump_style:
                type: string
                enum:
                  - none
                  - dashed
                description: 'Style of order bump display'
              orderbump_product_id:
                type: string
                description: 'Product ID for order bump (must be addon of main product)'
              orderbump_headline:
                type: string
                description: 'Headline for order bump'
              orderbump_html:
                type: string
                description: 'Text content for order bump'
              orderbump_position:
                type: string
                enum:
                  - before_playplan
                  - after_payplan
                  - before_checkout
                  - before_pay_button
                  - after_pay_button
                description: 'Position of order bump'
              refund_waiver_position:
                type: string
                enum:
                  - before_playplan
                  - after_payplan
                  - before_checkout
                  - before_pay_button
                  - after_pay_button
                description: 'Position of refund waiver'
              custom_css:
                type: string
                description: 'Custom CSS for the order form'
      responses:
        200:
          description: 'Order form successfully created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderform_id: { type: integer, description: 'ID of the created order form' }
        403:
          description: 'Access denied - Full access required'
        400:
          description: 'Invalid request parameters'
  /createPaymentplan:
    post:
      tags:
        - 'Payment Plans'
      summary: 'Create a payment plan'
      description: 'Creates a payment plan for a product on Digistore24'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: product_id
          in: query
          required: true
          description: 'Product ID to add the payment plan to'
          schema:
            type: string
        -
          name: data
          in: query
          required: true
          description: 'Payment plan properties'
          schema:
            type: object
            properties:
              first_amount:
                type: number
                description: 'Amount of first payment'
              first_billing_interval:
                type: string
                description: 'Interval between purchase and second payment'
              currency:
                type: string
                minLength: 3
                maxLength: 3
                description: 'Three-character currency code'
              other_amounts:
                type: number
                description: 'Amount for follow-up payments'
              other_billing_intervals:
                type: string
                description: 'Interval for follow-up payments'
              number_of_installments:
                type: integer
                minimum: 0
                description: 'Number of installments (0=subscription, 1=single payment, >=2=installment)'
              is_active:
                type: boolean
                description: 'Whether the payment plan is active'
              cancel_policy:
                type: string
                enum:
                  - 6m_0
                  - 6m_6m
                  - 6m_12m
                  - 12m_0
                  - 12m_3m
                  - 12m_6m
                  - 12m_12m
                  - 24m_0
                  - 24m_6m
                  - 24m_12m
                description: 'Minimum term policy'
      responses:
        200:
          description: 'Payment plan successfully created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_valid: { type: string, enum: ['Y', 'N'], description: 'Whether the payment plan is valid' }
                  paymentplan_id: { type: integer, description: 'ID of the created payment plan' }
        403:
          description: 'Access denied - Full access required'
        400:
          description: 'Invalid request parameters'
  /createProduct:
    post:
      tags:
        - Products
      summary: 'Create a product'
      description: 'Creates a product on Digistore24'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: data
          in: query
          required: true
          description: 'Product properties'
          schema:
            type: object
            properties:
              name_intern:
                type: string
                maxLength: 63
                description: 'Internal product name'
              name_de:
                type: string
                maxLength: 63
                description: 'German product name'
              name_en:
                type: string
                maxLength: 63
                description: 'English product name'
              name_es:
                type: string
                maxLength: 63
                description: 'Spanish product name'
              description_de:
                type: string
                description: 'German product description (filtered HTML)'
              description_en:
                type: string
                description: 'English product description (filtered HTML)'
              description_es:
                type: string
                description: 'Spanish product description (filtered HTML)'
              salespage_url:
                type: string
                maxLength: 255
                description: 'Sales page URL'
              upsell_salespage_url:
                type: string
                maxLength: 255
                description: 'Upsell sales page URL'
              thankyou_url:
                type: string
                maxLength: 255
                description: 'Thank you page URL'
              image_url:
                type: string
                maxLength: 255
                description: 'Product image URL'
              product_type_id:
                type: integer
                description: 'Product type ID (see getGlobalSettings product_types)'
              approval_status:
                type: string
                enum:
                  - new
                  - pending
                description: 'Product approval status'
              affiliate_commission:
                type: number
                format: float
                description: 'Affiliate commission amount'
              buyer_type:
                type: string
                enum:
                  - consumer
                  - business
                description: 'consumer=prices include VAT, business=prices exclude VAT'
              is_address_input_mandatory:
                type: string
                enum:
                  - 'Y'
                  - 'N'
                description: 'Y=buyer must always enter address, N=only when required for delivery'
              add_order_data_to_thankyou_page_url:
                type: string
                enum:
                  - 'Y'
                  - 'N'
                description: 'Y=add order data to thankyou URL, N=no order data added'
      responses:
        200:
          description: 'Product successfully created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_id: { type: integer, description: 'ID of the created product' }
        403:
          description: 'Access denied - Full access required'
        400:
          description: 'Invalid request parameters'
  /createProductGroup:
    post:
      tags:
        - 'Product Groups'
      summary: 'Create a product group'
      description: 'Creates a product group (folder) for organizing products'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: data
          in: query
          required: true
          description: 'Product group properties'
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                maxLength: 31
                description: 'Product group name'
              position:
                type: integer
                default: 10
                description: 'Display order position'
              is_shown_as_tab:
                type: string
                enum:
                  - 'Y'
                  - 'N'
                description: 'Whether the group is displayed as a tab in the product list'
      responses:
        200:
          description: 'Product group successfully created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_group_id: { type: integer, description: 'ID of the created product group' }
        403:
          description: 'Access denied - Full access required'
        400:
          description: 'Invalid request parameters'
  /createShippingCostPolicy:
    post:
      tags:
        - Shipping
      summary: 'Create a shipping cost policy'
      description: 'Creates a new shipping cost policy with the specified parameters'
      security:
        -
          ApiKeyAuth: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 63
                  description: 'Name of the shipping cost policy'
                label_XX:
                  type: string
                  maxLength: 63
                  description: 'Label shown on orderform. Replace XX with language code'
                position:
                  type: integer
                  default: 100
                  description: 'Display position'
                is_active:
                  type: boolean
                  default: true
                  description: 'Whether the policy is active'
                for_product_ids:
                  type: string
                  description: 'Comma separated list of product IDs this policy applies to'
                for_countries:
                  type: string
                  description: 'Comma separated list of ISO country codes (e.g. US,DE)'
                for_currencies:
                  type: string
                  description: 'Comma separated list of currency codes (e.g. USD,EUR)'
                fee_type:
                  type: string
                  enum: [total_fee, fee_per_unit]
                  description: 'Type of fee calculation'
                billing_cycle:
                  type: string
                  enum: [once, monthly]
                  description: 'When the shipping fee is charged'
                currency:
                  type: string
                  description: 'Currency code for the fees (e.g. USD)'
                scale_level_count:
                  type: integer
                  minimum: 1
                  maximum: 5
                  default: 1
                  description: 'Number of discount levels (1-5)'
                scale_1_amount:
                  type: number
                  format: float
                  description: 'Base shipping cost amount'
                scale_2_from:
                  type: integer
                  description: 'Number of items for second discount level'
                scale_2_amount:
                  type: number
                  format: float
                  description: 'Shipping cost for scale_2_from or more items'
                scale_3_from:
                  type: integer
                  description: 'Number of items for third discount level'
                scale_3_amount:
                  type: number
                  format: float
                  description: 'Shipping cost for scale_3_from or more items'
                scale_4_from:
                  type: integer
                  description: 'Number of items for fourth discount level'
                scale_4_amount:
                  type: number
                  format: float
                  description: 'Shipping cost for scale_4_from or more items'
                scale_5_from:
                  type: integer
                  description: 'Number of items for fifth discount level'
                scale_5_amount:
                  type: number
                  format: float
                  description: 'Shipping cost for scale_5_from or more items'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  policy_id: { type: integer, description: 'ID of the created shipping cost policy' }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
  /createUpgrade:
    post:
      tags:
        - Products
      summary: 'Create an upgrade'
      description: 'Creates a new upgrade option between products'
      security:
        -
          ApiKeyAuth: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - to_product_id
              properties:
                name:
                  type: string
                  description: 'Name of the new upgrade'
                to_product_id:
                  type: integer
                  description: 'The product ID being sold as the upgrade'
                upgrade_from:
                  type: string
                  description: 'Comma-separated list of product IDs that can be upgraded from. Changes take effect immediately.'
                  default: ''
                downgrade_from:
                  type: string
                  description: 'Comma-separated list of product IDs that can be downgraded from. Changes take effect next billing period.'
                  default: ''
                special_offer_for:
                  type: string
                  description: 'Comma-separated list of product IDs eligible for special member offers'
                  default: ''
                fallback_product_id:
                  type: integer
                  nullable: true
                  description: 'Product ID to offer if upgrade is not possible'
                  default: null
                is_active:
                  type: string
                  enum: ['Y', 'N']
                  default: 'Y'
                  description: 'Whether the upgrade is active and purchasable'
                buyer_readonly_keys:
                  type: string
                  enum: [none, email, email_and_name, all]
                  default: none
                  description: |
                    Determines which buyer data fields are protected:
                    * none - All fields editable
                    * email - Only email protected
                    * email_and_name - Email and name protected
                    * all - All fields protected
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  upgrade_id: { type: integer, description: 'ID of the created upgrade' }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
  /createUpgradePurchase:
    post:
      tags:
        - Products
      summary: 'Create an upgrade purchase'
      description: |
        Performs an upgrade without user interaction.
        Requires full access rights and "Billing on demand" permission.
        Note: You must ensure the buyer is informed and agrees to automatic upgrades.
      security:
        -
          ApiKeyAuth: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - purchase_ids
                - upgrade_id
              properties:
                purchase_ids:
                  type: string
                  description: 'Comma-separated list of purchase IDs. One matching purchase will be selected for upgrade.'
                upgrade_id:
                  type: string
                  description: 'ID of the upgrade to apply. Can be numeric ID (NNN) or ID with authkey (NNN-XXXXXXX).'
                payment_plan_id:
                  type: string
                  description: 'ID or index (starting with 1) of the payment plan to apply to the new purchase'
                quantities:
                  type: object
                  description: |
                    Quantities for main product and addons. Keys can be either:
                    - Item positions (starting with 1)
                    - Product IDs
                  example: { 1: 1, 2: 5 }
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { new_purchase: { type: object, properties: { id: { type: string, description: 'Purchase ID' }, billing_status: { type: string, description: 'Current billing status' }, paid_amount: { type: number, format: float, description: 'Amount already paid' }, next_payment_at: { type: string, format: date, description: 'Date of next payment' }, next_amount: { type: number, format: float, description: 'Amount of next payment' }, currency: { type: string, description: 'Currency code' } } }, upgrade_info: { type: object, properties: { upgrade_type: { type: string, description: 'Type of upgrade performed' }, upgrade_amount_left: { type: number, format: float, description: 'Remaining upgrade amount' }, upgrade_amount_total: { type: number, format: float, description: 'Total upgrade amount' }, upgraded_purchase_id: { type: string, description: 'ID of the upgraded purchase' } } } } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights or missing "Billing on demand" permission'
  /createVoucher:
    post:
      tags:
        - Vouchers
      summary: 'Create a discount voucher'
      description: 'Creates a new discount code/voucher'
      security:
        -
          ApiKeyAuth: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
                  description: 'The voucher code'
                product_ids:
                  type: string
                  description: 'Comma-separated list of product IDs this voucher applies to'
                  default: all
                valid_from:
                  type: string
                  format: date-time
                  description: 'Point in time from when the code becomes valid (e.g. 2017-12-31 12:00:00)'
                expires_at:
                  type: string
                  format: date-time
                  description: 'Point in time when the code becomes invalid'
                first_rate:
                  type: number
                  format: float
                  description: 'Discount percentage on first payment (subscriptions/installments) or single payment'
                other_rates:
                  type: number
                  format: float
                  description: 'Discount percentage on follow-up payments (subscriptions/installments)'
                first_amount:
                  type: number
                  format: float
                  description: 'Fixed discount amount on first/single payment'
                other_amounts:
                  type: number
                  format: float
                  description: 'Fixed discount amount on follow-up payments'
                currency:
                  type: string
                  description: 'Currency code for the fixed discount amounts'
                is_count_limited:
                  type: boolean
                  default: false
                  description: 'Whether the number of uses is limited'
                count_left:
                  type: integer
                  default: 1
                  description: 'Number of remaining uses if is_count_limited is true'
                upgrade_policy:
                  type: string
                  enum: [valid, other_only, not_valid]
                  default: valid
                  description: |
                    How the code is used for upgrades:
                    * valid - voucher fully usable
                    * other_only - only discount on follow-up installments
                    * not_valid - voucher not usable
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { discount_code_id: { type: integer, description: 'ID of the created voucher' }, code: { type: string, description: 'The voucher code' } } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
  /deleteBuyUrl:
    delete:
      tags:
        - 'Buy URLs'
      summary: 'Delete a buy URL'
      description: 'Deletes a BuyUrl object'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: id
          in: query
          required: true
          description: 'ID of the BuyUrl object to delete'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - BuyUrl with specified ID does not exist'
  /deleteImage:
    delete:
      tags:
        - Images
      summary: 'Delete an image'
      description: 'Deletes an image from the system'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: image_id
          in: query
          required: true
          description: 'ID of the image to delete'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Image with specified ID does not exist'
  /deleteOrderform:
    delete:
      tags:
        - 'Order Forms'
      summary: 'Delete an order form'
      description: 'Deletes an order form from the system'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: orderform_id
          in: query
          required: true
          description: 'ID of the order form to delete'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Order form with specified ID does not exist'
  /deletePaymentplan:
    delete:
      tags:
        - 'Payment Plans'
      summary: 'Delete a payment plan'
      description: 'Deletes a payment plan for a product on Digistore24'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: paymentplan_id
          in: query
          required: true
          description: 'ID of the payment plan to delete'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Payment plan with specified ID does not exist'
  /deleteProduct:
    delete:
      tags:
        - Products
      summary: 'Delete a product'
      description: "Deletes a user's Digistore24 product"
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: product_id
          in: query
          required: true
          description: 'ID of the product to delete'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Product with specified ID does not exist'
  /deleteProductGroup:
    delete:
      tags:
        - 'Product Groups'
      summary: 'Delete a product group'
      description: 'Deletes a product group from Digistore24'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: product_group_id
          in: query
          required: true
          description: 'ID of the product group to delete'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Product group with specified ID does not exist'
  /deleteShippingCostPolicy:
    delete:
      tags:
        - Shipping
      summary: 'Delete a shipping cost policy'
      description: 'Deletes a shipping cost policy from Digistore24'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: policy_id
          in: query
          required: true
          description: 'ID of the shipping cost policy to delete'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Shipping cost policy with specified ID does not exist'
  /deleteUpgrade:
    delete:
      tags:
        - Upgrades
      summary: 'Delete an upgrade'
      description: 'Deletes an upgrade from Digistore24'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: upgrade_id
          in: query
          required: true
          description: 'ID of the upgrade to delete'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Upgrade with specified ID does not exist'
  /deleteUpsells:
    delete:
      tags:
        - Products
      summary: 'Delete all upsells for a product'
      description: 'Delete all upsells for a Digistore24 product'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: product_id
          in: query
          required: true
          description: 'ID of the product whose upsells should be deleted'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_modified: { type: string, enum: ['Y', 'N'], description: 'Y if upsell tree was deleted, N if it was already deleted' }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Product with specified ID does not exist'
  /deleteVoucher:
    delete:
      tags:
        - Vouchers
      summary: 'Delete a voucher'
      description: 'Deletes a discount code/voucher'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: code
          in: query
          required: true
          description: 'The voucher code or voucher ID to delete'
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Voucher with specified code does not exist'
  /getAffiliateCommission:
    get:
      tags:
        - Affiliates
      summary: 'Get affiliate commission'
      description: 'Returns the affiliate commission details for an affiliate'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: affiliate_id
          in: query
          required: true
          description: 'ID, name or email of the affiliate'
          schema:
            type: string
        -
          name: product_ids
          in: query
          required: false
          description: 'Comma-separated list of product IDs or "all" for all products'
          schema:
            type: string
            default: all
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  commissions: { type: array, items: { type: object, properties: { commission_rate: { type: number, format: float, description: 'Percentage of affiliate commission' }, commission_fix: { type: number, format: float, description: 'Fixed commission amount in the specified currency' }, commission_currency: { type: string, description: 'Currency code for the fixed commission amount' }, approval_status: { type: string, enum: [new, approved, rejected, pending], description: 'Status of the affiliate approval' } } } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Affiliate not found'
  /getBuyer:
    get:
      tags:
        - Buyers
      summary: 'Get buyer details'
      description: "Returns a buyer's data record including address information"
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: buyer_id
          in: query
          required: true
          description: 'ID of the buyer to retrieve'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { buyer: { type: object, properties: { id: { type: integer, description: 'Buyer ID' }, address_id: { type: integer, description: 'Address ID' }, created_at: { type: string, format: date-time, description: 'Creation timestamp' }, email: { type: string, format: email, description: "Buyer's email address" }, first_name: { type: string, description: 'First name' }, last_name: { type: string, description: 'Last name' }, salutation: { type: string, description: 'Salutation (e.g. M for Mr)' }, title: { type: string, description: 'Academic or professional title' }, company: { type: string, description: 'Company name' }, street: { type: string, description: 'Full street address' }, street_name: { type: string, description: 'Street name portion' }, street_number: { type: string, description: 'Street number portion' }, zipcode: { type: string, description: 'Postal/ZIP code' }, city: { type: string, description: 'City name' }, state: { type: string, description: State/province }, country: { type: string, description: 'Two-letter country code' }, phone_no: { type: string, description: 'Phone number' } } } } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Buyer with specified ID does not exist'
  /getDelivery:
    get:
      tags:
        - Deliveries
      summary: 'Get delivery details'
      description: 'Returns a delivery data record including address and tracking information'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: delivery_id
          in: query
          required: true
          description: 'ID of the delivery to retrieve'
          schema:
            type: integer
        -
          name: set_in_progress
          in: query
          required: false
          description: 'If true, marks the delivery as in progress if not already marked'
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  delivery: { type: object, properties: { delivery_address: { type: object, properties: { title: { type: string, description: 'Academic or professional title' }, salutation: { type: string, description: 'Salutation (e.g. M for Mr)' }, company: { type: string, description: 'Company name' }, first_name: { type: string, description: 'First name' }, last_name: { type: string, description: 'Last name' }, street: { type: string, description: 'Street address' }, street2: { type: string, description: 'Additional address line' }, street_number: { type: string, description: 'Street number' }, city: { type: string, description: 'City name' }, state: { type: string, description: State/province }, zipcode: { type: string, description: 'Postal/ZIP code' }, country: { type: string, description: 'Two-letter country code' }, email: { type: string, format: email, description: 'Email address' }, phone_no: { type: string, description: 'Phone number' }, tax_id: { type: string, description: 'Tax ID' }, country_name: { type: string, description: 'Full country name' } } }, delivery_type: { type: string, description: 'Type of delivery (e.g. shipping)' }, product_type_name: { type: string, description: 'Name of the product type' }, invoice_url: { type: string, format: uri, description: 'URL to download invoice PDF' }, delivery_slip_url: { type: string, format: uri, description: 'URL to download delivery slip PDF' }, tracking: { type: array, items: { type: object, properties: { delivery_id: { type: integer, description: 'Delivery ID' }, parcel_service_type: { type: string, description: 'Shipping service code' }, service_label: { type: string, description: 'Shipping service name' }, tracking_id: { type: string, description: 'Tracking number' }, tracking_url: { type: string, format: uri, description: 'URL to track shipment' }, quantity: { type: integer, description: 'Number of items in this shipment' }, ipn_config_id: { type: string, description: 'IPN configuration ID' } } } }, quantity_total: { type: integer, description: 'Total quantity of items' }, id: { type: integer, description: 'Delivery ID' }, purchase_id: { type: string, description: 'Associated purchase ID' }, purchase_created_at: { type: string, format: date-time, description: 'Purchase creation timestamp' }, purchase_item_id: { type: integer, description: 'Purchase item ID' }, buyer_address_id: { type: integer, description: "Buyer's address ID" }, type: { type: string, description: 'Record type' }, processed_at: { type: string, format: date-time, description: 'Processing timestamp' }, processed_by: { type: string, description: 'Processor identifier' }, product_id: { type: integer, description: 'Product ID' }, product_name: { type: string, description: 'Product name' }, product_type_id: { type: integer, description: 'Product type ID' }, variant_label: { type: string, description: 'Product variant label' }, variant_name: { type: string, description: 'Product variant name' }, variant_key: { type: string, description: 'Product variant key' }, variant_id: { type: integer, description: 'Product variant ID' }, quantity_delivered: { type: integer, description: 'Number of items delivered' }, is_shippment_by_reseller_id: { type: string, description: 'Reseller ID if shipped by reseller' }, is_test_order: { type: string, enum: ['Y', 'N'], description: 'Whether this is a test order' } } }
                  is_set_in_progress: { type: string, enum: ['Y', 'N'], description: 'Whether delivery was marked as in progress' }
                  set_in_progress_fail_reason: { type: string, description: 'Reason why setting in progress failed, if applicable' }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Delivery with specified ID does not exist'
  /getEticket:
    get:
      tags:
        - E-Tickets
      summary: 'Get e-ticket details'
      description: 'Returns details of an e-ticket by its ID'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: eticket_id
          in: query
          required: true
          description: '20-digit numeric e-ticket ID'
          schema:
            type: string
            pattern: '^\d{20}$'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  eticket: { type: object, properties: { download_url: { type: string, format: uri, description: 'URL to download the e-ticket PDF' }, duration: { type: string, description: 'Duration of the event' }, date_id: { type: integer, description: 'ID of the event date' }, date: { type: string, format: date, description: 'Date of the event' }, hint: { type: string, description: 'Additional time/scheduling information' }, location_id: { type: integer, description: 'ID of the event location' }, template_id: { type: integer, description: 'ID of the e-ticket template' }, id: { type: integer, description: 'E-ticket ID' }, purchase_item_id: { type: integer, description: 'Associated purchase item ID' }, 'no': { type: integer, description: 'Ticket number' }, count: { type: integer, description: 'Number of tickets' }, email: { type: string, format: email, description: "Ticket holder's email" }, first_name: { type: string, description: "Ticket holder's first name" }, last_name: { type: string, description: "Ticket holder's last name" }, salutation: { type: string, description: 'Salutation (e.g. M for Mr)' }, title: { type: string, description: 'Academic or professional title' }, language: { type: string, description: 'Two-letter language code' }, used_at: { type: string, format: date-time, description: 'When the ticket was used' }, is_blocked: { type: string, enum: ['Y', 'N'], description: 'Whether the ticket is blocked' }, note: { type: string, description: 'Additional notes' }, product_id: { type: integer, description: 'Associated product ID' } } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - E-ticket with specified ID does not exist'
  /getEticketSettings:
    get:
      tags:
        - E-Tickets
      summary: 'Get e-ticket settings'
      description: 'Returns the e-ticket templates and event locations set up for the Digistore24 account'
      security:
        -
          ApiKeyAuth: {  }
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  eticket_owners: { type: object, description: 'Mapping of Digistore24 IDs to owner names', additionalProperties: { type: string }, example: { 123: my_own_digistore_id, 456: some_other_vendor_digistore_id } }
                  eticket_templates: { type: object, description: 'Templates grouped by owner ID', additionalProperties: { type: object, additionalProperties: { type: string } }, example: { 123: { 1234: 'Some seminar', 5678: 'Some other seminar' }, 456: { 9876: 'A seminar by some other vendor', 5432: 'Another seminar by some other vendor' } } }
                  eticket_locations: { type: object, description: 'Locations grouped by owner ID', additionalProperties: { type: object, additionalProperties: { type: string } }, example: { 123: { 5432: Berlin, 4321: Münster/Prinzipialmarkt }, 456: { 8765: München, 7654: Köln } } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
  /getGlobalSettings:
    get:
      tags:
        - System
      summary: 'Get global settings'
      description: 'Returns global Digistore24 settings like allowed image sizes and system types'
      security:
        -
          ApiKeyAuth: {  }
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  image_metas: { type: object, description: 'Metadata for different image types', additionalProperties: { type: object, properties: { label: { type: string, description: 'Display label for the image type' }, limits: { type: object, properties: { max_file_size_kb: { type: integer, description: 'Maximum file size in kilobytes' }, min_width: { type: integer, description: 'Minimum image width in pixels' }, max_width: { type: integer, description: 'Maximum image width in pixels' }, min_height: { type: integer, description: 'Minimum image height in pixels' }, max_height: { type: integer, description: 'Maximum image height in pixels' } } }, limits_msg: { type: string, description: 'Human readable description of the limits' } } }, example: { product: { label: Produkt, limits: { max_file_size_kb: 500, min_width: 100, max_width: 100, min_height: 100, max_height: 500 }, limits_msg: 'Breite genau 100 Pixel, Höhe von 100 bis 500 Pixel, max. 500 KB' } } }
                  types: { type: object, description: 'Available values for various system fields', additionalProperties: { type: object, additionalProperties: { type: string } }, example: { first_billing_interval: { 4_day: '4 Tage', 5_day: '5 Tage' } } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
  /getImage:
    get:
      tags:
        - Images
      summary: 'Get image details'
      description: "Returns an image's properties"
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: image_id
          in: query
          required: true
          description: 'Alphanumeric ID of the image'
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  image: { type: object, properties: { id: { type: string, description: 'Image ID' }, url: { type: string, format: uri, description: 'URL to access the image' }, type: { type: string, description: 'Type of image' }, properties: { type: object, description: 'Additional image properties' } } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Image with specified ID does not exist'
  /getMarketplaceEntry:
    get:
      tags:
        - Marketplace
      summary: 'Get marketplace entry details'
      description: 'Returns details of a single marketplace entry including statistics'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: entry_id
          in: query
          required: true
          description: 'ID of the marketplace entry to retrieve'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: integer, description: 'ID of the marketplace entry' }
                  main_product_id: { type: integer, description: 'ID of the main product' }
                  all_product_ids: { type: array, description: 'All product IDs including main product and related products', items: { type: integer } }
                  approval_status: { type: string, enum: [new, pending, approved, rejected], description: 'Approval status' }
                  approval_status_msg: { type: string, description: 'Approval status in plain text' }
                  price: { type: number, format: float, description: 'Estimated or statistical average product price' }
                  currency: { type: string, description: 'Currency code for all prices' }
                  price_msg: { type: string, description: 'Product price as HTML text' }
                  language: { type: string, description: 'Two-letter language code (e.g. "de" or "en")' }
                  is_price_msg_overriden: { type: string, enum: ['Y', 'N'], description: 'Whether price_msg was manually entered' }
                  product_category_id: { type: integer, description: 'Category ID of the marketplace entry' }
                  product_category: { type: string, description: 'Category name' }
                  headline: { type: string, description: 'Headline of the marketplace entry' }
                  description: { type: string, description: 'Description text in HTML format' }
                  affiliate_share: { type: number, format: float, description: 'Expected affiliate share percentage for a sale' }
                  product_created_at: { type: string, format: date-time, description: 'Product creation timestamp' }
                  stats_is_valid: { type: string, enum: ['Y', 'N'], description: 'Whether there are enough sales for valid statistics' }
                  stats_updated_at: { type: string, format: date-time, description: 'When statistics were last updated' }
                  stats_seller_rank: { type: integer, description: 'Overall Digistore24 seller rank' }
                  stats_seller_rank_category: { type: integer, description: 'Seller rank within product category' }
                  stats_stars: { type: number, format: float, minimum: 0, maximum: 5, description: 'Popularity rating from 0 to 5 stars' }
                  stats_affiliate_profit_visitor: { type: number, format: float, description: 'Average affiliate profit per order form visitor' }
                  stats_affiliate_profit_sale: { type: number, format: float, description: 'Average affiliate profit per initial sale' }
                  stats_count_orders_w_aff: { type: integer, description: 'Number of orders with affiliates' }
                  stats_cancel_rate: { type: number, format: float, description: 'Cancellation rate percentage' }
                  stats_revenue: { type: number, format: float, description: 'Total net revenue including subscriptions and upsells' }
                  stats_count_affiliates_with_sales: { type: integer, description: 'Number of affiliates that generated sales' }
                  stats_conversion_rate: { type: number, format: float, description: 'Cart conversion rate percentage' }
                  stats_count_orders: { type: integer, description: 'Total number of orders' }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Marketplace entry with specified ID does not exist'
  /getServiceProofRequest:
    get:
      tags:
        - 'Service Proofs'
      summary: 'Get service proof request details'
      description: |
        Retrieves details of a service proof request.
        These are created when a buyer requests a refund and Digistore24 needs proof that the service was provided,
        especially for sales in Germany where the right to refund can be voided.
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: service_proof_id
          in: query
          required: true
          description: 'Numeric ID of the service proof request'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  service_proof_request: { type: object, properties: { id: { type: integer, description: 'Service proof request ID' }, purchase_id: { type: string, description: 'Associated purchase ID' }, status: { type: string, description: 'Current status of the service proof request' }, created_at: { type: string, format: date-time, description: 'When the request was created' }, due_date: { type: string, format: date, description: 'When the proof needs to be provided by' }, notes: { type: string, description: 'Additional notes about the request' } } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Service proof request with specified ID does not exist'
  /getOrderform:
    get:
      tags:
        - 'Order Forms'
      summary: 'Get order form details'
      description: 'Returns details of an order form'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: orderform_id
          in: query
          required: true
          description: 'ID of the order form to retrieve'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderform: { type: object, description: 'Order form data record' }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Order form with specified ID does not exist'
  /getOrderformMetas:
    get:
      tags:
        - 'Order Forms'
      summary: 'Get order form metadata'
      description: 'Returns metadata and configuration options for order form editing'
      security:
        -
          ApiKeyAuth: {  }
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string, enum: [success] }
                  data: { type: object, properties: { placeholders: { type: object, properties: { images: { type: object, description: 'Available image placeholders', additionalProperties: { type: string }, example: { '[[RED_ARROW]]': "<img src='https://www.digistore24.com/webinc/images/orderform/order_bump/red_arrow_right.png' alt='' class='order_bump_icon' />", '[[RED_BLINK]]': "<img src='https://www.digistore24.com/webinc/images/orderform/order_bump/red_arrow_right_blink.gif' alt='' class='order_bump_icon' />" } }, other: { type: object, description: 'Other placeholders', additionalProperties: { type: string }, example: { '[[INPUT]]': '', '[[PRICE]]': '123 €' } } } }, options: { type: object, properties: { image: { type: object, properties: { orderform_header: { type: object, description: 'Available header images', additionalProperties: { type: string } }, orderform_favicon: { type: object, description: 'Available favicon images', additionalProperties: { type: string } }, orderform_widget_tab: { type: object, description: 'Available tab images', additionalProperties: { type: string } } } }, background_style: { type: object, description: 'Background style options', additionalProperties: { type: string }, example: { white: Weiß, blue: Blau } }, step_count: { type: object, description: 'Number of steps options', additionalProperties: { type: string }, example: { 1: 'Ein Schritt', 2: 'Zwei Schritte', 3: 'Drei Schritte' } }, tab_style: { type: object, description: 'Tab style options', additionalProperties: { type: string }, example: { bigtabs: Text, image: 'Bilder hochladen', image_url: 'Bilder per Url einbinden' } }, shipping_position: { type: object, description: 'Shipping information position options', additionalProperties: { type: string } }, summary_positions: { type: object, description: 'Order summary position options', additionalProperties: { type: string } }, refund_waiver_position: { type: object, description: 'Refund waiver position options', additionalProperties: { type: string } }, flex_elements_order: { type: object, description: 'Element ordering options', additionalProperties: { type: string } }, orderbump_position: { type: object, description: 'Order bump position options', additionalProperties: { type: string } }, product: { type: object, description: 'Available products grouped by category', additionalProperties: { type: string } } } }, form_metas: { type: object, description: 'Additional form metadata' } } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
  /getProduct:
    get:
      tags:
        - Products
      summary: 'Get product details'
      description: 'Returns details of a Digistore24 product'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: product_id
          in: query
          required: true
          description: 'Numeric ID of the product to retrieve'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  product: { type: object, description: 'Product data record with properties' }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Product with specified ID does not exist'
  /getProductGroup:
    get:
      tags:
        - 'Product Groups'
      summary: 'Get product group details'
      description: 'Returns details of a single product group'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: product_group_id
          in: query
          required: true
          description: 'ID of the product group to retrieve'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_group: { type: object, description: 'Product group data record' }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Product group with specified ID does not exist'
  /getShippingCostPolicy:
    get:
      tags:
        - Shipping
      summary: 'Get shipping cost policy details'
      description: 'Returns details of a shipping cost policy'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: policy_id
          in: query
          required: true
          description: 'ID of the shipping cost policy to retrieve'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  policy: { type: object, description: 'Shipping cost policy data record' }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Shipping cost policy with specified ID does not exist'
  /getPurchase:
    get:
      tags:
        - Purchases
      summary: 'Get purchase details'
      description: 'Returns details for one or more orders'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: purchase_id
          in: query
          required: true
          description: 'Single Digistore24 order ID or comma-separated list of order IDs'
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                oneOf:
                  - { description: 'Internal reference: #/components/schemas/PurchaseResponse' }
                  - { type: object, additionalProperties: { description: 'Circular reference to #/components/schemas/PurchaseResponse' } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Purchase with specified ID does not exist'
    components:
      schemas:
        PurchaseResponse:
          type: object
          properties:
            other_amounts:
              type: number
              format: float
              description: 'Amount of follow-up payments'
            other_vat_amounts:
              type: number
              format: float
              description: 'VAT amount for follow-up payments'
            id:
              type: string
              description: 'Purchase ID'
            amount:
              type: number
              format: float
              description: 'Purchase amount'
            currency:
              type: string
              description: 'Currency code'
            number_of_installments:
              type: integer
              description: 'Number of installments (0 for subscriptions)'
            vat_country:
              type: string
              description: 'Two-letter country code for VAT'
            vat_amount:
              type: number
              format: float
              description: 'VAT amount'
            vat_rate:
              type: number
              format: float
              description: 'VAT rate percentage'
            created_at:
              type: string
              format: date-time
              description: 'Purchase creation timestamp'
            billing_type:
              type: string
              enum:
                - single_payment
                - subscription
                - installment
              description: 'Type of billing'
            billing_type_msg:
              type: string
              description: 'Billing type in readable form'
            billing_status:
              type: string
              enum:
                - paying
                - completed
                - aborted
                - unpaid
                - reminding
              description: 'Current billing status'
            billing_status_msg:
              type: string
              description: 'Billing status in readable form'
            renew_url:
              type: string
              format: uri
              description: 'URL to renew payment'
            receipt_url:
              type: string
              format: uri
              description: 'URL to download receipt'
            invoice_url:
              type: string
              format: uri
              description: 'URL to download invoice'
            has_custom_forms:
              type: string
              enum:
                - 'Y'
                - 'N'
              description: 'Whether purchase has custom forms'
            has_etickets:
              type: string
              enum:
                - 'Y'
                - 'N'
              description: 'Whether purchase has e-tickets'
            transaction_list:
              type: array
              items:
                type: object
                properties:
                  id: { type: integer, description: 'Transaction ID' }
                  amount: { type: number, format: float, description: 'Transaction amount' }
                  currency: { type: string, description: 'Currency code' }
                  purchase_id: { type: string, description: 'Associated purchase ID' }
                  pay_method: { type: string, description: 'Payment method code' }
                  pay_method_msg: { type: string, description: 'Payment method in readable form' }
                  created_at: { type: string, format: date-time, description: 'Transaction timestamp' }
                  type: { type: string, enum: [payment, refund], description: 'Transaction type' }
                  type_msg: { type: string, description: 'Transaction type in readable form' }
                  invoice_url: { type: string, format: uri, description: 'URL to download invoice' }
            buyer:
              type: object
              properties:
                id:
                  type: integer
                  description: 'Buyer ID'
                created_at:
                  type: string
                  format: date-time
                  description: 'Account creation timestamp'
                email:
                  type: string
                  format: email
                  description: 'Email address'
                first_name:
                  type: string
                  description: 'First name'
                last_name:
                  type: string
                  description: 'Last name'
                salutation:
                  type: string
                  description: 'Salutation (e.g. Mr.)'
                title:
                  type: string
                  description: 'Academic title'
                company:
                  type: string
                  description: 'Company name'
                street:
                  type: string
                  description: 'Street address'
                street2:
                  type: string
                  description: 'Additional address line'
                zipcode:
                  type: string
                  description: 'Postal code'
                city:
                  type: string
                  description: City
                state:
                  type: string
                  description: State/province
                country:
                  type: string
                  description: 'Two-letter country code'
                phone_no:
                  type: string
                  description: 'Phone number'
            items:
              type: array
              items:
                type: object
                properties:
                  product_name: { type: string, description: 'Product name' }
                  product_id: { type: integer, description: 'Product ID' }
                  quantity: { type: integer, description: 'Quantity purchased' }
                  variant_key: { type: string, description: 'Product variant key' }
                  variant_name: { type: string, description: 'Product variant name' }
                  'no': { type: integer, description: 'Item number in order' }
                  count: { type: integer, description: 'Total number of items' }
                  id: { type: integer, description: 'Purchase item ID' }
            placeholders:
              type: object
              description: 'Placeholders used in createBuyUrl'
            refund_policy:
              type: object
              properties:
                purchase_id:
                  type: string
                  description: 'Purchase ID'
                reason_code:
                  type: string
                  enum: [business, consumer, common, vendor]
                  description: 'Reason for applied refund policy'
                refund_days:
                  type: integer
                  description: 'Number of days allowed for refund'
                is_reminder_allowed:
                  type: string
                  enum: ['Y', 'N']
                  description: 'Whether reminders are allowed'
                policy_id:
                  type: integer
                  description: 'Refund policy ID'
                product_type_id:
                  type: integer
                  description: 'Product type ID'
                delivery_type:
                  type: string
                  enum: [digital, shipping, service, event]
                  description: 'Type of delivery'
                checkbox_text:
                  type: string
                  description: 'Text of refund waiver checkbox'
            cancel_policy:
              type: string
              description: 'Subscription cancellation policy (e.g. "12m_3m")'
            can_cancel_before:
              type: string
              format: date
              description: 'Date when cancellation becomes effective'
  /getCustomerToAffiliateBuyerDetails:
    get:
      tags:
        - Affiliates
      summary: 'Get customer-to-affiliate program details'
      description: |
        Returns details on the customer to affiliate program for specific buyer(s).
        Requires customer-to-affiliate program to be set up in Digistore24 first.
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: purchase_id
          in: query
          required: true
          description: 'Single Digistore24 order ID or comma-separated list of order IDs'
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                oneOf:
                  - { description: 'Internal reference: #/components/schemas/CustomerAffiliateResponse' }
                  - { type: object, additionalProperties: { description: 'Circular reference to #/components/schemas/CustomerAffiliateResponse' } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights (requires full access)'
        404:
          description: 'Not found - Purchase with specified ID does not exist'
    components:
      schemas:
        CustomerAffiliateResponse:
          type: object
          properties:
            data:
              type: object
              properties:
                customer_affiliate_name:
                  type: string
                  description: 'Username assigned to buyer if they become an affiliate'
                customer_to_affiliate_url:
                  type: string
                  format: uri
                  description: 'URL for buyer to register as an affiliate'
                customer_affiliate_promo_url:
                  type: string
                  format: uri
                  description: 'URL for the new affiliate to promote products'
  /getPurchaseTracking:
    get:
      tags:
        - Purchases
      summary: 'Get purchase tracking details'
      description: 'Returns tracking data for one or more orders'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: purchase_id
          in: query
          required: true
          description: 'Single Digistore24 order ID or comma-separated list of order IDs'
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                oneOf:
                  - { description: 'Internal reference: #/components/schemas/TrackingResponse' }
                  - { type: object, additionalProperties: { description: 'Circular reference to #/components/schemas/TrackingResponse' } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Purchase with specified ID does not exist'
    components:
      schemas:
        TrackingResponse:
          type: object
          properties:
            data:
              type: object
              properties:
                utm_params:
                  type: object
                  properties: { utm_source: { type: string, description: 'UTM source parameter' }, utm_medium: { type: string, description: 'UTM medium parameter' }, utm_campaign: { type: string, description: 'UTM campaign parameter' }, utm_term: { type: string, description: 'UTM term parameter' }, utm_content: { type: string, description: 'UTM content parameter' } }
                click_id:
                  type: string
                  description: 'Click tracking ID'
                sub_ids:
                  type: array
                  description: 'Subscription IDs'
                  items: { type: string }
                vendor_key:
                  type: string
                  description: 'Vendor tracking key'
                campaign_key:
                  type: string
                  description: 'Campaign tracking key'
  /getPurchaseDownloads:
    get:
      tags:
        - Purchases
      summary: 'Get purchase download details'
      description: 'Returns download information for purchased digital products'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: purchase_id
          in: query
          required: true
          description: 'Single Digistore24 order ID or comma-separated list of order IDs'
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  downloads: { type: object, description: 'Downloads grouped by purchase ID and product ID', additionalProperties: { type: object, description: 'Product downloads for a purchase', additionalProperties: { type: array, description: 'Download files for a product', items: { type: object, properties: { url: { type: string, format: uri, description: 'Download URL for the file' }, downloads_total: { type: integer, description: 'Maximum number of allowed downloads' }, downloads_tries: { type: integer, description: 'Number of download attempts made' }, is_access_granted: { type: string, enum: ['Y', 'N'], description: 'Whether access is granted to download' }, is_purchase_paid: { type: string, enum: ['Y', 'N'], description: 'Whether the purchase has been paid' }, headline: { type: string, description: 'Optional headline for the download' }, instructions: { type: string, description: 'Optional download instructions' }, file_name: { type: string, description: 'Name of the file' }, file_ext: { type: string, description: 'File extension' }, file_size: { type: integer, description: 'Size of file in bytes' }, download_until: { type: string, format: date, description: 'Date until download is available' } } } } } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Purchase with specified ID does not exist'
  /getReferringAffiliate:
    get:
      tags:
        - Affiliates
      summary: 'Get referring affiliate details'
      description: 'Returns the referring partner for an affiliate'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: affiliate_id
          in: query
          required: true
          description: 'ID of the affiliate to check for referral'
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { affiliate_id: { type: integer, description: 'ID of the referred affiliate' }, affiliate_name: { type: string, description: 'Username of the referred affiliate' }, referrer_id: { type: integer, description: 'ID of the referring partner' }, referrer_name: { type: string, description: 'Username of the referring partner' }, commission: { type: number, format: float, description: 'Commission percentage' }, created_at: { type: string, format: date-time, description: 'When the referral was created' }, created_by: { type: integer, description: 'ID of user who created the referral' } } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Affiliate with specified ID does not exist'
  /getSmartupgrade:
    get:
      tags:
        - 'Smart Upgrades'
      summary: 'Get smart upgrade details'
      description: |
        Returns details of a smart upgrade, including HTML widget code if purchase IDs are provided.
        Note: Response may be slow, caching is recommended.
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: smartupgrade_id
          in: query
          required: true
          description: 'ID of the smart upgrade to retrieve'
          schema:
            type: string
        -
          name: purchase_id
          in: query
          required: false
          description: 'Single purchase ID or comma-separated list of purchase IDs'
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, description: 'Smart upgrade data record including widget HTML if purchase_id provided' }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Smart upgrade with specified ID does not exist'
  /getUpgrade:
    get:
      tags:
        - Upgrades
      summary: 'Get upgrade details'
      description: 'Returns details of an upgrade and optionally checks if upgrade is possible for specific orders'
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: upgrade_id
          in: query
          required: true
          description: 'Numeric ID of the upgrade to retrieve'
          schema:
            type: integer
        -
          name: order_ids
          in: query
          required: false
          description: 'Comma-separated list of order IDs to check upgrade possibility'
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { item: { type: object, properties: { upgrade_url: { type: string, format: uri, description: 'URL to perform the upgrade' }, to_product_name: { type: string, description: 'Name of the product being upgraded to' }, id: { type: integer, description: 'Upgrade ID' }, name: { type: string, description: 'Name of the upgrade' }, to_product_id: { type: integer, description: 'ID of the product being upgraded to' }, is_active: { type: string, enum: ['Y', 'N'], description: 'Whether the upgrade is active' }, authkey: { type: string, description: 'Authentication key for the upgrade' }, fallback_product_id: { type: integer, description: 'Product ID to offer if upgrade not possible' }, buyer_readonly_keys: { type: string, enum: [none, email, email_and_name, all], description: 'Which buyer fields are read-only' }, upgrade_types: { type: object, description: 'Mapping of product IDs to upgrade types', additionalProperties: { type: string, enum: [upgrade, downgrade] } } } }, check: { type: object, description: 'Upgrade possibility check results (only present if order_ids provided)', properties: { is_upgrade_possible: { type: string, enum: ['Y', 'N'], description: 'Whether upgrade is possible' }, is_one_click_payment_possible: { type: string, enum: ['Y', 'N'], description: 'Whether one-click payment is available' }, possible_upgrade_type: { type: string, enum: [upgrade, downgrade], description: 'Type of upgrade possible' } } } } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
        404:
          description: 'Not found - Upgrade with specified ID does not exist'
  /getUpsells:
    get:
      tags:
        - Products
      summary: 'Get upsell product IDs'
      description: |
        Returns the upsell product IDs for an initial product.
        The upsell tree keys indicate positions in the upsell process:
        - y = First upsell offer after initial sale
        - yy = Upsell offer after buyer bought first upsell
        - yn = Upsell offer if buyer declined first upsell
        Keys consist of 1-5 characters, only y and n, always beginning with y.
      security:
        -
          ApiKeyAuth: {  }
      parameters:
        -
          name: product_id
          in: query
          required: true
          description: 'ID of the product to get upsells for'
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { product_id: { type: integer, description: 'ID of the initial product' }, upsells: { type: object, description: 'Upsell tree mapping position codes to product IDs', additionalProperties: { type: integer }, example: { 'y': 51, yn: 52, yy: 53, yny: 52, yyy: 54, yyyy: 55, yyyn: 55 } }, product_options: { type: object, description: 'Additional product options' } } }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights (requires full access)'
        404:
          description: 'Not found - Product with specified ID does not exist'
  /getUserInfo:
    get:
      tags:
        - Users
      summary: 'Get current user information'
      description: 'Returns data about the current user (the owner of the API key)'
      security:
        -
          ApiKeyAuth: {  }
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id: { type: integer, description: 'Numeric ID of the API key holder', example: 12345 }
                  user_name: { type: string, description: 'Digistore ID (login name)' }
                  granted_roles: { type: string, description: 'Comma-separated list of role codes', example: 'user,affiliate,merchant,operator,admin' }
                  granted_roles_msg: { type: string, description: 'Comma-separated list of role names in plain text', example: 'User,Affiliate,Vendor,Operator,Admin' }
        401:
          description: 'Unauthorized - Invalid or missing API key'
        403:
          description: 'Forbidden - Insufficient access rights'
  /getVoucher:
    get:
      tags:
        - Vouchers
      summary: 'Get voucher details'
      description: 'Returns details about a specific voucher code'
      operationId: getVoucher
      parameters:
        -
          name: code
          in: query
          description: 'The voucher code that the buyer enters on the order form'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  coupon: { type: object, properties: { first_rate: { type: number, format: float, example: 0.0 }, other_rates: { type: number, format: float, example: 0.0 }, id: { type: integer, example: 2477 }, code: { type: string, example: test }, valid_until: { type: string, nullable: true }, expires_at: { type: string, nullable: true }, product_ids: { type: string, description: 'all or comma-separated product IDs', example: all }, first_amount: { type: number, format: float, example: 10.0 }, other_amounts: { type: number, format: float, example: 5.0 }, upgrade_policy: { type: string, example: valid }, is_count_limited: { type: string, enum: ['Y', 'N'], example: 'N' }, count_left: { type: integer, example: 1 }, currency: { type: string, example: EUR } } }
      security:
        -
          ApiKeyAuth: {  }
  /ipnDelete:
    delete:
      tags:
        - IPN
      summary: 'Delete IPN connection'
      description: 'Deletes the IPN connection with the given domain_id'
      operationId: ipnDelete
      parameters:
        -
          name: domain_id
          in: query
          description: 'Used to delete the IPN connection'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
      security:
        -
          ApiKeyAuth: {  }
  /ipnInfo:
    get:
      tags:
        - IPN
      summary: 'Get IPN connection settings'
      description: 'Returns the settings of the IPN connection'
      operationId: ipnInfo
      parameters:
        -
          name: domain_id
          in: query
          description: 'Domain ID specified when creating the connection using ipnSetup'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                description: 'The settings that were transferred when the connection was created by ipnSetup'
      security:
        -
          ApiKeyAuth: {  }
  /ipnSetup:
    post:
      tags:
        - IPN
      summary: 'Create IPN connection'
      description: 'Creates an IPN connection for receiving notifications'
      operationId: ipnSetup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ipn_url
                - name
                - product_ids
              properties:
                ipn_url:
                  type: string
                  description: 'URL where Digistore24 sends the IPN notification'
                name:
                  type: string
                  description: 'The name listed on Digistore (e.g. your platform name)'
                product_ids:
                  type: string
                  description: '"all" or a comma-separated list of product IDs'
                domain_id:
                  type: string
                  description: 'Used to delete the IPN connection and ensure uniqueness. Usually your platform name'
                categories:
                  type: string
                  description: 'Comma separated list of transaction categories'
                  example: 'orders,affiliations,e-tickets,custom forms'
                transactions:
                  type: string
                  description: 'Comma-separated list of transaction types'
                  default: 'payment,refund,chargeback,payment_missed'
                  example: 'payment,refund,chargeback,payment_missed,rebill_cancelled,rebill_resumed,last_paid_day'
                timing:
                  type: string
                  enum: [before_thankyou, delayed]
                  default: before_thankyou
                  description: 'Controls when the IPN notification is sent'
                sha_passphrase:
                  type: string
                  maxLength: 63
                  description: 'Password for signing parameters. Use "random" for auto-generated 30-char password'
                newsletter_send_policy:
                  type: string
                  enum: [end_policy_send_always, end_if_not_optout, end_if_optout, end_if_optin]
                  default: end_policy_send_always
                  description: 'Controls when to send IPN based on newsletter opt-in status'
      responses:
        200:
          description: 'Successful operation'
      security:
        -
          ApiKeyAuth: {  }
  /listAccountAccess:
    get:
      tags:
        - 'Account Access'
      summary: 'List account access permissions'
      description: "Returns a list of accounts granted access to or by the API key owner's account"
      operationId: listAccountAccess
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  by_me: { type: array, description: 'Accounts you have granted access to', items: { type: object, properties: { id: { type: integer, example: 51 }, owner_id: { type: integer, example: 3599 }, accessor_id: { type: integer, example: 4469 }, permissions: { type: string, example: can_full_access }, permissions_msg: { type: string, example: 'Full access' }, created_at: { type: string, format: date-time, example: '2013-12-09 15:15:56' }, modified_at: { type: string, format: date-time, example: '2020-04-29 14:06:34' }, can_see_non_affiliate_purchases: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_approve_affiliations: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_see_edit_marketplace_link: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_edit_products: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_edit_affiliate_commissions: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_read_mail_history: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_approve_purchases: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_edit_purchases_approval_policy: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_give_permissions: { type: string, enum: ['Y', 'N'], example: 'N' }, can_see_revenue: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_edit_discount_vouchers: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_csv_export: { type: string, enum: ['Y', 'N'], example: 'Y' } } } }
                  to_me: { type: array, description: 'Accounts you have been granted access to', items: { type: object, properties: { id: { type: integer, example: 63 }, owner_id: { type: integer, example: 4469 }, accessor_id: { type: integer, example: 3599 }, permissions: { type: string, example: can_full_access }, permissions_msg: { type: string, example: 'Full access' }, created_at: { type: string, format: date-time, example: '2014-01-02 13:33:13' }, modified_at: { type: string, format: date-time, example: '2020-06-21 23:58:18' }, can_see_non_affiliate_purchases: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_approve_affiliations: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_see_edit_marketplace_link: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_edit_products: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_edit_affiliate_commissions: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_read_mail_history: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_approve_purchases: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_edit_purchases_approval_policy: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_give_permissions: { type: string, enum: ['Y', 'N'], example: 'N' }, can_see_revenue: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_edit_discount_vouchers: { type: string, enum: ['Y', 'N'], example: 'Y' }, can_csv_export: { type: string, enum: ['Y', 'N'], example: 'Y' } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listBuyers:
    get:
      tags:
        - Buyers
      summary: 'List buyers'
      description: 'Returns a paginated list of your Digistore24 buyers'
      operationId: listBuyers
      parameters:
        -
          name: page_no
          in: query
          description: 'Page number for pagination (starts at 1)'
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        -
          name: page_size
          in: query
          description: 'Number of buyers per page'
          required: false
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  page_no: { type: integer, example: 1 }
                  page_size: { type: integer, example: 100 }
                  item_count: { type: integer, example: 121 }
                  page_count: { type: integer, example: 1 }
                  items: { type: array, items: { type: object, properties: { id: { type: integer, example: 20 }, address_id: { type: integer, example: 25 }, created_at: { type: string, format: date-time, example: '2012-05-06 17:50:30' }, email: { type: string, example: some-name@email.de }, first_name: { type: string, example: Claus }, last_name: { type: string, example: Meier }, salutation: { type: string, example: M }, title: { type: string, nullable: true }, company: { type: string, nullable: true }, street: { type: string, example: 'Some Street Name 172' }, street_name: { type: string, example: 'Some Street Name' }, street_number: { type: string, example: '172' }, zipcode: { type: string, example: '12345' }, city: { type: string, example: 'Some City' }, state: { type: string, nullable: true }, country: { type: string, example: DE }, phone_no: { type: string, nullable: true } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listBuyUrls:
    get:
      tags:
        - 'Buy URLs'
      summary: 'List buy URLs'
      description: 'Returns a list of buy URLs for your products'
      operationId: listBuyUrls
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  items: { type: array, items: { type: object, properties: { id: { type: integer, example: 123 }, product_id: { type: integer, example: 456 }, url: { type: string, example: 'https://www.digistore24.com/product/123' }, created_at: { type: string, format: date-time }, modified_at: { type: string, format: date-time } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listCommissions:
    get:
      tags:
        - Commissions
      summary: 'List commissions'
      description: 'Returns a list of your Digistore24 commission amounts'
      operationId: listCommissions
      parameters:
        -
          name: from
          in: query
          description: 'Start time for commission list (e.g. "2014-02-28 23:11:24", "now", "-3d", "start")'
          required: false
          schema:
            type: string
            default: '-24h'
        -
          name: to
          in: query
          description: 'End time for commission list'
          required: false
          schema:
            type: string
            default: now
        -
          name: page_no
          in: query
          description: 'Page number for pagination (starts at 1)'
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        -
          name: page_size
          in: query
          description: 'Number of items per page (0 for all entries)'
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: transaction_type
          in: query
          description: 'Filter by transaction types'
          required: false
          schema:
            type: string
            default: 'payment,refund,refund_request,chargeback'
        -
          name: commission_type
          in: query
          description: 'Filter by commission types'
          required: false
          schema:
            type: string
            default: all
        -
          name: purchase_id
          in: query
          description: 'Filter by specific purchase ID'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  page_no: { type: integer, example: 1 }
                  page_size: { type: integer, example: 100 }
                  item_count: { type: integer, example: 121 }
                  page_count: { type: integer, example: 1 }
                  items: { type: array, items: { type: object, properties: { id: { type: integer, example: 1234567 }, created_at: { type: string, format: date-time, example: '2019-03-07 17:49:40' }, amount: { type: number, format: float, example: 12.34 }, currency: { type: string, example: EUR }, reason: { type: string, example: merchant_share }, schedule_payout_at: { type: string, format: date, example: '2019-03-21' }, transaction_id: { type: integer, example: 98765 }, purchase_id: { type: string, example: ABC1234 } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listConversionTools:
    get:
      tags:
        - 'Conversion Tools'
      summary: 'List conversion tools'
      description: 'Returns a list of all the conversions that you have set up in Digistore24'
      operationId: listConversionTools
      parameters:
        -
          name: type
          in: query
          description: 'Types of conversion tools to list (comma-separated)'
          required: true
          schema:
            type: string
            example: 'smartupgrade,socialproof_box,socialproof_bubble,countdown'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  smartupgrades: { type: array, items: { type: object, properties: { id: { type: integer, example: 1 }, name: { type: string, example: 'Upgrade auf Komplettversion' }, authkey: { type: string, example: R7w4XmVXgIkZ2iGceLhc2AXBh }, created_at: { type: string, format: date-time, example: '2016-03-17 15:40:50' }, is_custom_css_used: { type: string, enum: ['Y', 'N'], example: 'N' }, custom_css: { type: string, nullable: true }, upgrade_to_product_id: { type: integer, example: 12345 }, product_ids: { type: string, example: '373,20,340,4929,4931' } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listCountries:
    get:
      tags:
        - Countries
      summary: 'List available countries'
      description: 'Returns a list of countries that are set up in Digistore24, with their two-digit ISO country codes'
      operationId: listCountries
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                  description: 'Country name'
                example:
                  EG: Ägypten
                  AL: Albania
                  DZ: Algerien
                  AD: Andorra
                  AO: Angola
                  AI: Anguilla
                  AG: 'Antigua and Bar'
                  AR: Argentinen
                  AM: Armenien
      security:
        -
          ApiKeyAuth: {  }
  /listCurrencies:
    get:
      tags:
        - Currencies
      summary: 'List available currencies'
      description: 'Returns a list of currencies that can be used when selling via Digistore24'
      operationId: listCurrencies
      parameters:
        -
          name: convert_to
          in: query
          description: 'Optional list of currencies to get exchange rates for (e.g. "EUR", "EUR,USD,CHF", or "all")'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: { id: { type: integer, example: 1 }, code: { type: string, example: EUR }, symbol: { type: string, example: € }, min_price: { type: number, format: float, example: 0.8 }, max_price: { type: number, format: float, example: 5000.0 }, name: { type: string, example: EURO } }
      security:
        -
          ApiKeyAuth: {  }
  /listEticketLocations:
    get:
      tags:
        - E-Tickets
      summary: 'List e-ticket locations'
      description: 'Lists your e-ticket locations'
      operationId: listEticketLocations
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: { id: { type: integer, description: 'Location ID' }, name: { type: string, description: 'Location name' }, address: { type: string, description: 'Location address' } }
      security:
        -
          ApiKeyAuth: {  }
  /listCustomFormRecords:
    get:
      tags:
        - 'Custom Forms'
      summary: 'List custom form records'
      description: 'Returns a list with data from additional input fields'
      operationId: listCustomFormRecords
      parameters:
        -
          name: purchase_id
          in: query
          description: 'Optional Digistore24 order ID to filter records'
          required: false
          schema:
            type: string
            example: WF7Q4KVP
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records: { type: array, items: { type: object, properties: { form_id: { type: integer, example: 16320 }, id: { type: integer, example: 633296 }, purchase_id: { type: string, example: WF7Q4KVP }, purchase_item_id: { type: integer, example: 1541851 }, product_id: { type: integer, example: 12345 }, form_no: { type: integer, example: 1 }, form_count: { type: integer, example: 2 }, data: { type: object, description: 'Contains all the entered data', additionalProperties: { type: string }, example: { first_name: Klaus, last_name: Meier, email: klaus.meier@some-domain.com, occupation: Maler } }, address: { type: object, description: 'Contains the data that was taken on as an address', additionalProperties: { type: string }, example: { first_name: Klaus, last_name: Meier, email: klaus.meier@some-domain.com } } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listEticketTemplates:
    get:
      tags:
        - E-Tickets
      summary: 'List e-ticket templates'
      description: 'Lists your e-ticket templates'
      operationId: listEticketTemplates
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: { id: { type: integer, description: 'Template ID' }, name: { type: string, description: 'Template name' }, created_at: { type: string, format: date-time, description: 'Template creation date' }, modified_at: { type: string, format: date-time, description: 'Template last modification date' } }
      security:
        -
          ApiKeyAuth: {  }
  /listServiceProofRequests:
    get:
      tags:
        - 'Service Proofs'
      summary: 'List service proof requests'
      description: 'Retrieve a list of service proof requests for your Digistore account'
      operationId: listServiceProofRequests
      parameters:
        -
          name: search
          in: query
          description: 'Search criteria for filtering requests'
          required: false
          content:
            application/json:
              schema:
                type: object
                properties:
                  purchase_id: { type: string, description: 'Filter by purchase ID' }
                  product_id: { type: integer, description: 'Filter by product ID' }
                  delivery_type: { type: string, description: 'Filter by delivery type', enum: [digital, shipping, service, event, download] }
                  approval_status: { type: string, description: 'Filter by approval status', enum: [new, pending, approved, rejected] }
                  request_status: { type: string, description: 'Filter by request status', enum: [pending, proof_provided, exec_refund] }
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: { id: { type: integer, description: 'Service proof request ID' }, purchase_id: { type: string, description: 'Associated purchase ID' }, product_id: { type: integer, description: 'Associated product ID' }, delivery_type: { type: string, enum: [digital, shipping, service, event, download] }, approval_status: { type: string, enum: [new, pending, approved, rejected] }, request_status: { type: string, enum: [pending, proof_provided, exec_refund] }, created_at: { type: string, format: date-time }, modified_at: { type: string, format: date-time } }
      security:
        -
          ApiKeyAuth: {  }
  /listDeliveries:
    get:
      tags:
        - Deliveries
      summary: 'List deliveries'
      description: 'Returns a list of your deliveries'
      operationId: listDeliveries
      parameters:
        -
          name: search
          in: query
          description: 'Search criteria for filtering deliveries'
          required: false
          content:
            application/json:
              schema:
                type: object
                properties:
                  purchase_id: { type: string, description: 'Filter by order ID' }
                  from: { type: string, format: date, description: 'Start date for filtering' }
                  to: { type: string, format: date, description: 'End date for filtering' }
                  type: { type: string, description: 'Comma separated list of delivery types', example: 'request,in_progress,delivery,partial_delivery,return,cancel' }
                  same_address_as: { type: string, description: 'Lists all deliveries shipped to the same address as the given delivery_id' }
                  is_processed: { type: boolean, description: 'Filter by processed status' }
                  is_test_order: { type: string, enum: ['Y', 'N'], description: 'Filter test/real orders' }
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  delivery: { type: array, items: { type: object, properties: { delivery_address: { type: object, properties: { title: { type: string, nullable: true }, salutation: { type: string, example: M }, company: { type: string, nullable: true }, first_name: { type: string, example: Helen }, last_name: { type: string, example: Myer }, street: { type: string, example: 'Some Street' }, street2: { type: string, nullable: true }, street_number: { type: string, example: '4321' }, city: { type: string, example: 'Some City' }, state: { type: string, example: NY }, zipcode: { type: string, example: '12345' }, country: { type: string, example: US }, email: { type: string, example: someuser@email.com }, phone_no: { type: string, nullable: true }, tax_id: { type: string, nullable: true }, country_name: { type: string, example: USA } } }, delivery_type: { type: string, example: shipping }, product_type_name: { type: string, example: 'Dietary supplement - health' }, tracking: { type: array, items: { type: object, properties: { delivery_id: { type: integer, example: 6442755 }, parcel_service_type: { type: string, example: ups }, service_label: { type: string, example: UPS }, tracking_id: { type: string, example: '12748999983421543437130661' }, tracking_url: { type: string, example: 'http://wwwapps.ups.com/WebTracking/processInputRequest?TypeOfInquiryNumber=T&InquiryNumber1=12748999983421543437130661' }, quantity: { type: integer, example: 1 }, ipn_config_id: { type: string, nullable: true } } } }, quantity_total: { type: integer, example: 1 }, id: { type: integer, example: 6446755 }, purchase_id: { type: string, example: AC6FUE4N }, purchase_created_at: { type: string, format: date-time, example: '2021-07-27 02:32:13' }, purchase_item_id: { type: integer, example: 27900026 }, buyer_address_id: { type: integer, example: 19113624 }, type: { type: string, example: delivery }, processed_at: { type: string, format: date-time, nullable: true }, processed_by: { type: string, nullable: true }, product_id: { type: integer, example: 367544 }, product_name: { type: string, example: 'Healing Potion - 3 bottle' }, product_type_id: { type: integer, example: 49 }, variant_label: { type: string, nullable: true }, variant_name: { type: string, nullable: true }, variant_key: { type: string, nullable: true }, variant_id: { type: integer, example: 0 }, quantity_delivered: { type: integer, example: 1 }, is_shippment_by_reseller_id: { type: string, nullable: true }, is_test_order: { type: string, enum: ['Y', 'N'], example: 'N' } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listEtickets:
    get:
      tags:
        - E-Tickets
      summary: 'List e-tickets'
      description: 'Returns a list of e-tickets'
      operationId: listEtickets
      parameters:
        -
          name: search
          in: query
          description: 'Search criteria for filtering e-tickets'
          required: false
          content:
            application/json:
              schema:
                type: object
                properties:
                  owner_id: { type: string, description: 'Comma-separated list of vendor IDs whose tickets to find' }
                  purchase_id: { type: string, description: 'Filter by purchase ID' }
                  first_name: { type: string, description: 'Filter by first name' }
                  last_name: { type: string, description: 'Filter by last name' }
                  email: { type: string, description: 'Filter by email' }
                  template_id: { type: string, description: 'Comma-separated list of e-ticket template IDs' }
                  location_id: { type: string, description: 'Comma-separated list of e-ticket location IDs' }
                  date: { type: string, description: "Date when the ticket should be valid (e.g. 2017-12-31 or 'today')" }
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  etickets: { type: array, items: { type: object, properties: { download_url: { type: string, example: 'https://www.digistore24.com/eticket/file12345678901234567890.pdf' }, duration: { type: string, nullable: true }, date_id: { type: integer, example: 1 }, date: { type: string, format: date, example: '2014-09-25' }, hint: { type: string, example: '17:00' }, location_id: { type: integer, example: 3 }, template_id: { type: integer, example: 3 }, id: { type: integer, example: 1328422185 }, purchase_item_id: { type: integer, example: 525759 }, 'no': { type: integer, example: 1 }, count: { type: integer, example: 1 }, email: { type: string, example: michael.meier@some-domain.com }, first_name: { type: string, example: Michael }, last_name: { type: string, example: Meier }, salutation: { type: string, enum: [M, F], example: M }, title: { type: string, nullable: true, example: 'Prof. Dr.' }, language: { type: string, example: de }, used_at: { type: string, format: date-time, nullable: true, example: '2014-09-2522:03:22' }, is_blocked: { type: string, enum: ['Y', 'N'], example: 'N' }, note: { type: string, nullable: true }, product_id: { type: integer, example: 20 } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listImages:
    get:
      tags:
        - Images
      summary: 'List images'
      description: 'Returns a list of your Digistore24 images'
      operationId: listImages
      parameters:
        -
          name: usage_type
          in: query
          description: "Purpose of the images (e.g. 'product'). See getGlobalSettings() image_usage_type field"
          required: true
          schema:
            type: string
            example: product
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  images: { type: array, items: { type: object, properties: { url: { type: string, example: 'https://d3prvp0id2r5kj.cloudfront.net/merchant_1/image/product/05CZEP6G' }, file_extension: { type: string, example: png }, id: { type: string, example: 05CZEP6G }, name: { type: string, example: 071VX0KZ }, approval_status: { type: string, example: approved }, usage_type: { type: string, example: product }, alt_tag: { type: string, nullable: true }, width: { type: integer, example: 100 }, height: { type: integer, example: 100 } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listInvoices:
    get:
      tags:
        - Invoices
      summary: 'List order invoices'
      description: 'Returns a list of invoices for a specific purchase'
      operationId: listInvoices
      parameters:
        -
          name: purchase_id
          in: query
          description: 'The ID of the purchase (must belong to the Digistore account associated with the API key)'
          required: true
          schema:
            type: string
            example: TJLBP8ZC
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { purchase_id: { type: string, example: TJLBP8ZC }, invoice_list: { type: array, items: { type: object, properties: { invoice_url: { type: string, example: 'https://www.digistore24.com/invoice/TJLBP8ZC/10194397/AEHNX1HF.pdf' }, invoice_label: { type: string, example: 'Rechnung Nr. 12345 - 14.10.2017 - 33,00 €' }, invoice_id: { type: string, example: '12345' }, invoice_date: { type: string, format: date, example: '2017-10-14' }, pay_method: { type: string, example: paypal }, pay_method_msg: { type: string, example: Paypal }, purchase_id: { type: string, example: TJLBP8ZC }, type: { type: string, example: payment }, amount: { type: string, example: '33.00' }, currency: { type: string, example: EUR } } } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listMarketplaceEntries:
    get:
      tags:
        - Marketplace
      summary: 'List marketplace entries'
      description: 'Lists all marketplace data of the vendor including statistical numbers'
      operationId: listMarketplaceEntries
      parameters:
        -
          name: sort_by
          in: query
          description: 'Sorting criteria for marketplace entries'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string, example: '1.010' }
                  current_time: { type: string, format: date-time, example: '2015-03-05 18:45:14' }
                  result: { type: string, example: success }
                  data: { type: object, properties: { entries: { type: array, items: { type: object, properties: { id: { type: integer, example: 1 }, stats_stars: { type: number, format: float, example: 0.83 } } } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listOrderforms:
    get:
      tags:
        - 'Order Forms'
      summary: 'List order forms'
      description: 'Lists your order forms'
      operationId: listOrderforms
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: { id: { type: integer, description: 'Order form ID' }, name: { type: string, description: 'Order form name' }, created_at: { type: string, format: date-time, description: 'Creation timestamp' }, modified_at: { type: string, format: date-time, description: 'Last modification timestamp' } }
      security:
        -
          ApiKeyAuth: {  }
  /listPurchasesOfEmail:
    get:
      tags:
        - Purchases
      summary: 'List purchases by email'
      description: 'Lists purchases belonging to an email address'
      operationId: listPurchasesOfEmail
      parameters:
        -
          name: email
          in: query
          description: "The buyer's email address"
          required: true
          schema:
            type: string
            format: email
        -
          name: limit
          in: query
          description: 'Maximum number of purchases to show'
          required: false
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: { id: { type: string, description: 'Purchase ID' }, created_at: { type: string, format: date-time, description: 'Purchase creation timestamp' }, amount: { type: number, format: float, description: 'Purchase amount' }, currency: { type: string, description: 'Purchase currency' }, status: { type: string, description: 'Purchase status' } }
      security:
        -
          ApiKeyAuth: {  }
  /listPaymentPlans:
    get:
      tags:
        - 'Payment Plans'
      summary: 'List payment plans'
      description: 'Returns a list of payment plans created for a product on Digistore24'
      operationId: listPaymentPlans
      parameters:
        -
          name: product_id
          in: query
          description: 'The Digistore24 product ID'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: { id: { type: integer, description: 'Payment plan ID' }, product_id: { type: integer, description: 'Associated product ID' }, name: { type: string, description: 'Payment plan name' }, created_at: { type: string, format: date-time, description: 'Creation timestamp' }, modified_at: { type: string, format: date-time, description: 'Last modification timestamp' } }
      security:
        -
          ApiKeyAuth: {  }
  /listPayouts:
    get:
      tags:
        - Payouts
      summary: 'List payouts'
      description: 'Returns a list of your credit notes as a vendor and affiliate on Digistore24'
      operationId: listPayouts
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { payout_list: { type: array, items: { type: object, properties: { credit_note_url: { type: string, example: 'https://www.digistor24.com/creditnote/12345/AABBCCDDEEFFGG.pdf' }, commission_list_url: { type: string, example: 'https://www.digistor24.com/commissions/12345/AABBCCDDEEFFGG.csv' }, reseller_name: { type: string, example: 'Digistore24 GmbH, Germany' }, reseller_id: { type: integer, example: 1 }, id: { type: integer, example: 12345 }, created_at: { type: string, format: date-time, example: '2019-01-31 07:53:37' }, processed_at: { type: string, format: date-time, nullable: true }, vat_rate: { type: number, format: float, example: 0.0 }, vat_regulation: { type: string, example: germany_no_vat }, currency: { type: string, example: EUR }, payout_method: { type: string, example: paypal }, vendor_gross_amount: { type: number, format: float, example: 1190.0 }, vendor_net_amount: { type: number, format: float, example: 1000.0 }, vendor_vat_amount: { type: number, format: float, example: 190.0 }, affiliate_gross_amount: { type: number, format: float, example: 0.0 }, affiliate_net_amount: { type: number, format: float, example: 0.0 }, affiliate_vat_amount: { type: number, format: float, example: 0.0 }, fee_amount: { type: number, format: float, example: 0 }, fee_vat_amount: { type: number, format: float, example: 0 } } } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listProductGroups:
    get:
      tags:
        - 'Product Groups'
      summary: 'List product groups'
      description: 'Returns a list of your product groups'
      operationId: listProductGroups
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: { id: { type: integer, description: 'Product group ID' }, name: { type: string, description: 'Product group name' }, created_at: { type: string, format: date-time, description: 'Creation timestamp' }, modified_at: { type: string, format: date-time, description: 'Last modification timestamp' } }
      security:
        -
          ApiKeyAuth: {  }
  /listShippingCostPolicies:
    get:
      tags:
        - Shipping
      summary: 'List shipping cost policies'
      description: 'Returns a list of your shipping cost policies'
      operationId: listShippingCostPolicies
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: { id: { type: integer, description: 'Shipping cost policy ID' }, name: { type: string, description: 'Policy name' }, created_at: { type: string, format: date-time, description: 'Creation timestamp' }, modified_at: { type: string, format: date-time, description: 'Last modification timestamp' }, rules: { type: array, description: 'Shipping cost rules', items: { type: object } } }
      security:
        -
          ApiKeyAuth: {  }
  /listProducts:
    get:
      tags:
        - Products
      summary: 'List products'
      description: 'Returns a list of your Digistore24 products'
      operationId: listProducts
      parameters:
        -
          name: sort_by
          in: query
          description: 'Sort products by name or product group'
          required: false
          schema:
            type: string
            enum:
              - name
              - group
            default: name
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: { id: { type: integer, example: 39 }, name: { type: string, example: 'The Weight Loss Cake' }, note: { type: string, nullable: true }, tag: { type: string, nullable: true }, language: { type: string, example: de }, product_group_id: { type: integer, nullable: true, example: 17 }, product_group_name: { type: string, nullable: true, example: 'My happiness products' }, units_left: { type: string, example: infinite }, created_at: { type: string, format: date-time, example: '2012-06-07 00:45:36' }, modified_at: { type: string, format: date-time, example: '2013-09-16 21:45:10' } }
      security:
        -
          ApiKeyAuth: {  }
  /listProductTypes:
    get:
      tags:
        - Products
      summary: 'List product types'
      description: 'Returns a list of available product types'
      operationId: listProductTypes
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: { id: { type: integer, description: 'Product type ID' }, name: { type: string, description: 'Product type name' }, category: { type: string, description: 'Product type category' } }
      security:
        -
          ApiKeyAuth: {  }
  /listPurchases:
    get:
      tags:
        - Purchases
      summary: 'List purchases'
      description: 'Returns a list of your sales, including those where you get a commission (e.g. joint ventures)'
      operationId: listPurchases
      parameters:
        -
          name: from
          in: query
          description: 'Start time for purchase list (e.g. "2014-02-28 23:11:24", "now", "-3d", "start")'
          required: false
          schema:
            type: string
            default: '-24h'
        -
          name: to
          in: query
          description: 'End time for purchase list'
          required: false
          schema:
            type: string
            default: now
        -
          name: search
          in: query
          description: 'Search criteria'
          required: false
          content:
            application/json:
              schema:
                type: object
                properties:
                  role: { type: string, description: 'Filter by role (vendor,affiliate,other - comma separated)' }
                  product_id: { type: string, description: 'Filter by product IDs (comma separated)' }
                  first_name: { type: string, description: 'Filter by buyer first name' }
                  last_name: { type: string, description: 'Filter by buyer last name' }
                  email: { type: string, description: 'Filter by buyer email' }
                  has_affiliate: { type: boolean, description: 'Filter purchases with/without affiliate' }
                  affiliate_name: { type: string, description: 'Filter by affiliate name' }
                  order_type: { type: string, enum: [live, test], description: 'Filter by order type' }
                  pay_method: { type: string, description: 'Filter by payment methods (comma separated)' }
                  billing_type: { type: string, description: 'Filter by billing types (comma separated)' }
                  transaction_type: { type: string, description: 'Filter by transaction types (comma separated)' }
                  currency: { type: string, description: 'Filter by currency' }
                  purchase_id: { type: string, description: 'Filter by purchase IDs (comma separated)' }
        -
          name: sort_by
          in: query
          description: 'Sort criteria'
          required: false
          schema:
            type: string
            enum:
              - date
              - earning
              - amount
            default: date
        -
          name: sort_order
          in: query
          description: 'Sort order'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
        -
          name: load_transactions
          in: query
          description: 'Include transaction list for each purchase'
          required: false
          schema:
            type: boolean
            default: false
        -
          name: page_no
          in: query
          description: 'Page number (starts at 1)'
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        -
          name: page_size
          in: query
          description: 'Number of items per page'
          required: false
          schema:
            type: integer
            default: 500
            minimum: 1
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  purchase_list: { type: array, items: { type: object, properties: { click_id: { type: string, description: 'Affiliate click ID (only for affiliate purchases)' }, sub_ids: { type: object, description: 'Affiliate sub IDs (only for affiliate purchases)', properties: { sid1: { type: string }, sid2: { type: string }, sid3: { type: string }, sid4: { type: string }, sid5: { type: string } } } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listRebillingStatusChanges:
    get:
      tags:
        - Rebilling
      summary: 'List rebilling status changes'
      description: 'Returns a list of status changes regarding rebilling'
      parameters:
        -
          name: from
          in: query
          description: 'Start time for the query (e.g. "2014-02-28 23:11:24", "now", "-3d", "start")'
          schema:
            type: string
          default: '-24h'
        -
          name: to
          in: query
          description: 'End time for the query'
          schema:
            type: string
          default: now
        -
          name: page_no
          in: query
          description: 'Page number, starting at 1'
          schema:
            type: integer
            minimum: 1
          default: 1
        -
          name: page_size
          in: query
          description: 'Number of entries per page'
          schema:
            type: integer
            minimum: 1
          default: 100
      responses:
        200:
          description: 'List of rebilling status changes'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { from: { type: string, format: date-time }, to: { type: string, format: date-time }, items: { type: array, items: { type: object, properties: { id: { type: integer }, purchase_id: { type: string }, created_at: { type: string, format: date-time }, pay_sequence_no: { type: integer }, type: { type: string, enum: [rebill_cancelled, last_paid_day, rebill_resumed] }, type_msg: { type: string } } } }, page_size: { type: integer }, page_no: { type: integer }, page_count: { type: integer }, item_count: { type: integer } } }
      security:
        -
          ApiKeyAuth: {  }
  /listSmartUpgrades:
    get:
      tags:
        - 'Smart Upgrades'
      summary: 'List all smart upgrades'
      description: 'Returns a list of all smart upgrades that you have set up in Digistore24'
      parameters: {  }
      responses:
        200:
          description: 'List of smart upgrades'
          content:
            application/json:
              schema:
                type: object
                properties:
                  smartupgrades: { type: array, items: { type: object, properties: { id: { type: integer, example: 1 }, name: { type: string, example: 'Upgrade auf Komplettversion' }, authkey: { type: string, example: R7w4XmVXgIkZ2iGceLhc2AXBh }, created_at: { type: string, format: date-time }, is_custom_css_used: { type: string, enum: ['Y', 'N'] }, custom_css: { type: string, nullable: true }, upgrade_to_product_id: { type: integer, example: 12345 }, product_ids: { type: string, description: 'Comma-separated list of product IDs', example: '373,20,340,4929,4931' } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listTransactions:
    post:
      tags:
        - Transactions
      summary: 'List transactions (payments, returns, chargebacks)'
      description: |
        Returns a list of transactions where you get a commission for. This includes payments, refunds 
        and chargebacks from joint venture sales.
      parameters:
        -
          name: from
          in: query
          description: |
            Point of time to filter transaction creation date from. Examples:
            - "2014-02-28 23:11:24"
            - "2021-10-08T07:20:11-05:00" (ISO 8601)
            - "now" for current time
            - "-3d" for 3 days ago
            - "start" for first available date
          schema:
            type: string
            default: '-24h'
        -
          name: to
          in: query
          description: 'Point of time to filter transaction creation date to'
          schema:
            type: string
            default: now
        -
          name: search
          in: query
          description: 'Search criteria'
          schema:
            type: object
            properties:
              role:
                type: string
                description: 'Filter by role (vendor, affiliate, other). Comma-separated for multiple.'
              product_id:
                type: string
                description: 'Filter by product ID(s). Comma-separated for multiple.'
              first_name:
                type: string
                description: 'Filter by buyer first name'
              last_name:
                type: string
                description: 'Filter by buyer last name'
              email:
                type: string
                description: 'Filter by buyer email'
              has_affiliate:
                type: boolean
                description: 'Filter transactions with/without affiliate'
              affiliate_name:
                type: string
                description: 'Filter by affiliate name'
              pay_method:
                type: string
                description: 'Filter by payment method(s). Comma-separated for multiple.'
              billing_type:
                type: string
                description: 'Filter by billing type(s). Comma-separated for multiple.'
              transaction_type:
                type: string
                description: 'Filter by transaction type(s) (payment, refund, chargeback, refund_request)'
              currency:
                type: string
                description: 'Filter by currency code'
              purchase_id:
                type: string
                description: 'Filter by purchase ID(s). Comma-separated for multiple.'
        -
          name: sort_by
          in: query
          description: 'Field to sort results by'
          schema:
            type: string
            enum:
              - date
              - earning
              - amount
            default: date
        -
          name: sort_order
          in: query
          description: 'Sort direction'
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
        -
          name: page_no
          in: query
          description: 'Page number (starts at 1)'
          schema:
            type: integer
            minimum: 1
            default: 1
        -
          name: page_size
          in: query
          description: 'Number of entries per page'
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 500
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  result: { type: string }
                  data: { type: object, properties: { from: { type: string, format: date-time }, to: { type: string, format: date-time }, page_size: { type: integer }, page_no: { type: integer }, page_count: { type: integer }, summary: { type: object, properties: { amounts: { type: object, additionalProperties: { type: object, properties: { count: { type: integer }, total_amount: { type: number }, vat_amount: { type: number }, earned_amount: { type: number } } } }, count: { type: integer } } }, transaction_list: { type: array, items: { type: object, properties: { id: { type: integer }, purchase_id: { type: string }, amount: { type: number }, currency: { type: string }, transaction_type: { type: string }, transaction_type_msg: { type: string }, created_at: { type: string, format: date-time }, buyer: { type: object, properties: { id: { type: integer }, email: { type: string }, first_name: { type: string }, last_name: { type: string } } } } } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listUpgrades:
    post:
      tags:
        - Upgrades
      summary: 'List upgrades created in Digistore24'
      description: 'Lists all upgrades that you have created in Digistore24'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { upgrades: { type: array, items: { type: object, properties: { upgrade_url: { type: string, description: 'URL template for upgrade, replace ORDER_ID with actual order IDs', example: 'https://www.digistore24.com/upgrade/123-aBcDeFgH1234/ORDER_ID' }, id: { type: integer, description: 'Unique upgrade ID', example: 123 }, name: { type: string, description: 'Name of the upgrade', example: 'Some Upgrade Name' }, to_product_id: { type: integer, description: 'Target product ID for the upgrade', example: 654 }, is_active: { type: string, enum: ['Y', 'N'], description: 'Whether the upgrade is active' }, authkey: { type: string, description: 'Authentication key for the upgrade', example: aBcDeFgH1234 }, fallback_product_id: { type: integer, nullable: true, description: 'Fallback product ID if upgrade not available' }, buyer_readonly_keys: { type: string, description: 'Buyer readonly keys configuration', example: none }, upgrade_types: { type: object, description: "Available upgrade types per product:\n- special_offer: Member offer, existing order remains unchanged\n- upgrade: Immediate upgrade, existing payments terminated, credit transferred\n- downgrade: Downgrade effective next billing period\n", additionalProperties: { type: string, enum: [upgrade, downgrade, special_offer] } } } } } } }
      security:
        -
          ApiKeyAuth: {  }
  /listVouchers:
    post:
      tags:
        - Vouchers
      summary: 'List voucher codes'
      description: 'Returns a list of all voucher codes'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { coupons: { type: array, items: { type: object, properties: { id: { type: integer, description: 'Unique voucher ID', example: 2477 }, code: { type: string, description: 'Voucher code', example: EinGutscheinCode }, valid_until: { type: string, nullable: true, description: 'Validity end date' }, expires_at: { type: string, nullable: true, description: 'Expiration date' }, product_ids: { type: string, description: "Applicable product IDs or 'all'", example: all }, first_rate: { type: number, format: float, description: 'Discount rate for first payment', example: 0.0 }, other_rates: { type: number, format: float, description: 'Discount rate for subsequent payments', example: 0.0 }, first_amount: { type: number, format: float, description: 'Discount amount for first payment', example: 10.0 }, other_amounts: { type: number, format: float, description: 'Discount amount for subsequent payments', example: 5.0 }, upgrade_policy: { type: string, description: 'Upgrade policy for the voucher', example: valid }, is_count_limited: { type: string, enum: ['Y', 'N'], description: 'Whether voucher usage is limited' }, count_left: { type: integer, description: 'Number of remaining uses', example: 1 }, currency: { type: string, description: 'Currency code', example: EUR }, is_discarding_early_bird: { type: string, enum: ['Y', 'N'], description: 'Whether early bird discount is discarded' } } } }, are_returned_data_public: { type: string, enum: ['Y', 'N'], description: 'Whether returned data is public' } } }
      security:
        -
          ApiKeyAuth: {  }
  /getAffiliateForEmail:
    post:
      tags:
        - Affiliates
      summary: 'Get affiliate data for email'
      description: 'Returns the affiliate data previously assigned to the email by setAffiliateForEmail'
      parameters:
        -
          name: email
          in: query
          required: true
          description: 'The email address of the future buyer'
          schema:
            type: string
            format: email
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { affiliate_name: { type: string, description: 'Name of the affiliate', example: some_affiliate }, affiliate_id: { type: integer, description: 'Unique ID of the affiliate', example: 123 }, campaignkey: { type: string, description: 'Campaign key', example: some-campaignkey }, trackingkey: { type: string, description: 'Tracking key', example: some-trackingkey }, click_id: { type: string, description: 'Click ID', example: some-clickid }, promoclick_at: { type: string, format: date-time, description: 'Timestamp of promotional click', example: '2022-09-16 19:30:10' } } }
      security:
        -
          ApiKeyAuth: {  }
  /createRebillingPayment:
    post:
      tags:
        - Payments
      summary: 'Create rebilling payment for purchase'
      description: |
        Triggers a rebilling payment for a purchase. Only available for vendors with "Billing on demand" permission.
        The payment plan must be set to "Billing mode: by trigger" in the payment plan details.
      parameters:
        -
          name: purchase_id
          in: query
          required: true
          description: 'The ID of the purchase to trigger rebilling payment for'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { purchase_id: { type: string, description: 'The order ID (same as input parameter)' }, payment_status: { type: string, enum: [completed, pending, uncertain, refused, error], description: 'Status of the payment attempt' }, payment_message: { type: string, description: 'Error message in case of payment failure' }, billing_status: { type: string, enum: [paying, aborted, unpaid, completed, payment_data_update_required], description: "Current billing status:\n- paying: payments can be processed\n- aborted: buyer/support stopped rebilling\n- unpaid: no initial payment made\n- completed: fully paid (single payments/installments)\n- payment_data_update_required: buyer needs to update payment info\n" }, payment_data_update_url: { type: string, description: 'URL where buyer can update payment information' } } }
      security:
        -
          ApiKeyAuth: {  }
  /ping:
    get:
      tags:
        - System
      summary: 'Ping server'
      description: 'Tests the connection to the Digistore24 server and determines the server time.'
      operationId: ping
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, properties: { server_time: { type: string, format: date-time, description: 'The server time, e.g. 2014-03-31 19:23:33' } } }
      security:
        -
          api_key: {  }
        -
          development_key: {  }
  /refundPartially:
    post:
      tags:
        - Purchases
      summary: 'Refund partially'
      description: 'Refunds a partial amount of a payment (not the complete payment). The refund amount is treated as a discount. The order status does not change.'
      operationId: refundPartially
      parameters:
        -
          name: purchase_id
          in: query
          description: 'The purchase ID'
          required: true
          schema:
            type: string
        -
          name: amount
          in: query
          description: 'The amount to refund. Must not be higher than a payment amount.'
          required: true
          schema:
            type: number
            format: float
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, description: 'The response data structure is not specified in the original documentation' }
      security:
        -
          api_key: {  }
  /refundPurchase:
    post:
      tags:
        - Purchases
      summary: 'Refund purchase'
      description: 'Refunds all payments of an order which may be refunded.'
      operationId: refundPurchase
      parameters:
        -
          name: purchase_id
          in: query
          description: 'The purchase ID'
          required: true
          schema:
            type: string
        -
          name: force
          in: query
          description: 'If false (default), the refund will only be processed if the refund policy allows it. If true, the refund will be attempted anyway.'
          required: false
          schema:
            type: boolean
            default: false
        -
          name: request_date
          in: query
          description: 'If given, apply refund policies based on the given date. Use this if there is a delay between refund request by the buyer and processing time.'
          required: false
          schema:
            type: string
            format: date
            default: now
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, description: 'The response data structure is not specified in the original documentation' }
      security:
        -
          api_key: {  }
  /refundTransaction:
    post:
      tags:
        - Transactions
      summary: 'Refund transaction'
      description: 'Refunds a payment for the order.'
      operationId: refundTransaction
      parameters:
        -
          name: transaction_id
          in: query
          description: 'The transaction ID'
          required: true
          schema:
            type: string
        -
          name: force
          in: query
          description: 'If false (default), the refund will only be processed if the refund policy allows it. If true, the refund will be attempted anyway.'
          required: false
          schema:
            type: boolean
            default: false
        -
          name: request_date
          in: query
          description: 'If given, apply refund policies based on the given date. Use this if there is a delay between refund request by the buyer and processing time.'
          required: false
          schema:
            type: string
            format: date
            default: now
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, properties: { status: { type: string, enum: [completed, refused, pending, error] }, modified: { type: string, enum: ['Y', 'N'] }, note: { type: string }, pending_reason: { type: string, enum: [default_delay, proof_missing, proof_aproval, blocked] }, pending_reason_msg: { type: string }, pending_until: { type: string, format: date-time }, action_url: { type: string }, error_reason: { type: string, enum: [refund_completed, refund_pending, unknown] }, processed_at: { type: string, format: date-time } } }
      security:
        -
          api_key: {  }
  /renderJsTrackingCode:
    get:
      tags:
        - Tracking
      summary: 'Render JS tracking code'
      description: 'Creates a JavaScript code that reads the current affiliate, campaign key and tracking key on a landing page and stores them e.g. in hidden inputs.'
      operationId: renderJsTrackingCode
      parameters:
        -
          name: affiliate_input
          in: query
          description: 'The name of the HTML form input field to be updated with the affiliate name'
          schema:
            type: string
        -
          name: campaignkey_input
          in: query
          description: 'The name of the HTML form input field to be updated with the campaign key'
          schema:
            type: string
        -
          name: trackingkey_input
          in: query
          description: 'The name of the HTML form input field to be updated with the tracking key'
          schema:
            type: string
        -
          name: callback
          in: query
          description: 'The name of a JavaScript function that is called up with the transferred data'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, properties: { script_code: { type: string, description: 'The complete JavaScript tag to be embedded' }, script_url: { type: string, description: 'The script URL' } } }
      security:
        -
          api_key: {  }
  /reportFraud:
    post:
      tags:
        - 'Fraud Management'
      summary: 'Report fraud'
      description: 'Reports the customer and/or the affiliate as a fraud.'
      operationId: reportFraud
      parameters:
        -
          name: transaction_id
          in: query
          description: 'The numeric ID of the fraud transaction'
          required: true
          schema:
            type: integer
        -
          name: who
          in: query
          description: 'Specifies who is being reported as fraud'
          required: true
          schema:
            type: string
            enum:
              - buyer
              - affiliate
              - buyer
              - affiliate
        -
          name: comment
          in: query
          description: 'Explanation of why this is considered a fraud order'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, properties: { buyer_status: { type: string, enum: [info, success, warning, failure] }, buyer_message: { type: string }, buyer_code: { type: string, enum: [created_entry, rerequest, not_created] }, affiliate_status: { type: string, enum: [info, success, warning, failure] }, affiliate_message: { type: string }, affiliate_code: { type: string, enum: [created_entry, rerequest, not_created] } } }
      security:
        -
          api_key: {  }
  /requestApiKey:
    post:
      tags:
        - 'API Key Management'
      summary: 'Request API key'
      description: 'Initiates the interactive process of creating a new API key.'
      operationId: requestApiKey
      parameters:
        -
          name: permissions
          in: query
          description: 'The rights of the new key'
          required: true
          schema:
            type: string
            enum:
              - read-only
              - writable
        -
          name: return_url
          in: query
          description: 'URL to redirect the user after API key creation'
          required: true
          schema:
            type: string
        -
          name: cancel_url
          in: query
          description: 'URL to redirect the user if they cancel the API key creation'
          required: false
          schema:
            type: string
        -
          name: site_url
          in: query
          description: 'URL to be stored with the key as a website in use'
          required: false
          schema:
            type: string
        -
          name: comment
          in: query
          description: 'Optional comment to be deposited with the new API key'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, properties: { request_url: { type: string, description: 'URL to direct the user for API key creation' }, request_token: { type: string, description: 'Token to be saved for later retrieval of the API key' } } }
      security:
        -
          development_key: {  }
  /resendInvoiceMail:
    post:
      tags:
        - Purchases
      summary: 'Resend invoice mail'
      description: 'Sends an email with all invoices pertaining to the order.'
      operationId: resendInvoiceMail
      parameters:
        -
          name: purchase_id
          in: query
          description: 'The Digistore24 order ID'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, properties: { status: { type: string, enum: [success, error] }, note: { type: string, description: 'Note about the result' } } }
      security:
        -
          api_key: {  }
  /resendPurchaseConfirmationMail:
    post:
      tags:
        - Purchases
      summary: 'Resend purchase confirmation mail'
      description: 'Resends the order confirmation email.'
      operationId: resendPurchaseConfirmationMail
      parameters:
        -
          name: purchase_id
          in: query
          description: 'The Digistore24 order ID'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, properties: { modified: { type: string, enum: ['Y', 'N'] }, note: { type: string, description: 'Note text on the outcome' } } }
      security:
        -
          api_key: {  }
  /retrieveApiKey:
    post:
      tags:
        - 'API Key Management'
      summary: 'Retrieve API key'
      description: 'Retrieves the new API key using a token previously returned by the requestApiKey function.'
      operationId: retrieveApiKey
      parameters:
        -
          name: token
          in: query
          description: 'Token returned by the requestApiKey function'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, properties: { api_key: { type: string, description: 'The new API key or an empty string if the token is invalid, too old, or has already been used' }, request_status: { type: string, enum: [pending, aborted, completed] }, note: { type: string, description: 'If no API key was returned, an indication of the cause' } } }
      security:
        -
          development_key: {  }
  /setAffiliateForEmail:
    post:
      tags:
        - Affiliates
      summary: 'Set affiliate for email'
      description: 'Assigns an affiliate, campaign key and tracking key to an email address.'
      operationId: setAffiliateForEmail
      parameters:
        -
          name: email
          in: query
          description: 'The email address of the future buyer'
          required: true
          schema:
            type: string
            format: email
        -
          name: affiliate
          in: query
          description: "The affiliate's Digistore24 ID"
          required: true
          schema:
            type: string
        -
          name: campaignkey
          in: query
          description: "The affiliate's campaign key"
          required: false
          schema:
            type: string
        -
          name: trackingkey
          in: query
          description: 'Your tracking key'
          required: false
          schema:
            type: string
        -
          name: click_id
          in: query
          description: "Your affiliate's click ID (for their S2S postback connection)"
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, description: 'No specific data returned for this endpoint' }
      security:
        -
          api_key: {  }
  /setReferringAffiliate:
    post:
      tags:
        - Affiliates
      summary: 'Set referring affiliate'
      description: 'Set the referring partner for an affiliate.'
      operationId: setReferringAffiliate
      parameters:
        -
          name: referrer_id
          in: query
          description: 'The partner bringing affiliates'
          required: true
          schema:
            type: string
        -
          name: affiliate_id
          in: query
          description: 'The affiliate possibly referred by the partner'
          required: true
          schema:
            type: string
        -
          name: commission
          in: query
          description: 'The percentage of the affiliate commission the vendor will pay to the referring partner'
          required: false
          schema:
            type: number
            format: float
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, properties: { action: { type: string, enum: [read, create, update, none] }, affiliate_id: { type: string }, affiliate_name: { type: string }, referrer_id: { type: string }, referrer_name: { type: string }, commission: { type: number, format: float }, created_at: { type: string, format: date-time }, created_by: { type: string } } }
      security:
        -
          api_key: {  }
  /startRebilling:
    post:
      tags:
        - Billing
      summary: 'Start rebilling'
      description: 'Resumes the payments if they have been stopped.'
      operationId: startRebilling
      parameters:
        -
          name: purchase_id
          in: query
          description: 'The Digistore24 order ID'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, properties: { modified: { type: string, enum: ['Y', 'N'] }, note: { type: string }, billing_status: { type: string, enum: [paying, aborted, unpaid, reminding, completed] }, billing_status_msg: { type: string }, next_payment_at: { type: string, format: date-time }, rebilling_active: { type: string, enum: ['Y', 'N'] } } }
      security:
        -
          api_key: {  }
  /statsAffiliateToplist:
    get:
      tags:
        - Statistics
      summary: 'Get affiliate toplist'
      description: 'Returns the list of your affiliates sorted by sales for a specified time period.'
      operationId: statsAffiliateToplist
      parameters:
        -
          name: from
          in: query
          description: 'Start month for the report (e.g., 2015-01)'
          required: true
          schema:
            type: string
            format: yyyy-MM
        -
          name: to
          in: query
          description: 'End month for the report (e.g., 2015-12)'
          required: true
          schema:
            type: string
            format: yyyy-MM
        -
          name: affiliate
          in: query
          description: 'Digistore id of a specific affiliate (optional)'
          schema:
            type: string
        -
          name: currency
          in: query
          description: 'Currency code to show the revenue for (e.g., USD, EUR, GBP, CHF, PLN)'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, properties: { top_list: { type: array, items: { description: 'Internal reference: #/components/schemas/AffiliateToplistItem' } } } }
      security:
        -
          api_key: {  }
    components:
      schemas:
        AffiliateToplistItem:
          type: object
          properties:
            affiliate_id:
              type: integer
            affiliate_name:
              type: string
            currency:
              type: string
            brutto_amount:
              type: number
            netto_amount:
              type: number
            payment_amount:
              type: number
            refund_amount:
              type: number
            chargeback_amount:
              type: number
            cancellation_amount:
              type: number
            affiliate_amount:
              type: number
            merchant_amount:
              type: number
            refund_quota:
              type: number
            chargeback_quota:
              type: number
            cancellation_quota:
              type: number
  /statsDailyAmounts:
    get:
      tags:
        - Statistics
      summary: 'Get daily sales amounts'
      description: 'Returns a list of daily sales amounts for a specified time range.'
      operationId: statsDailyAmounts
      parameters:
        -
          name: from
          in: query
          description: "Start date for the report. Can be a date string, 'now', or a relative time like '-7d'."
          schema:
            type: string
          example: '-7d'
        -
          name: to
          in: query
          description: "End date for the report. Can be a date string, 'now', or a relative time."
          schema:
            type: string
          example: now
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, properties: { amount_list: { type: array, items: { description: 'Internal reference: #/components/schemas/DailyAmount' } } } }
      security:
        -
          api_key: {  }
    components:
      schemas:
        DailyAmount:
          type: object
          properties:
            day:
              type: string
              format: date
            currency:
              type: string
            vendor_share_amount:
              type: number
            vendor_brutto_amount:
              type: number
            vendor_netto_amount:
              type: number
            affiliate_share_amount:
              type: number
            affiliate_brutto_amount:
              type: number
            affiliate_netto_amount:
              type: number
            other_share_amount:
              type: number
            other_brutto_amount:
              type: number
            other_netto_amount:
              type: number
            total_share_amount:
              type: number
            total_brutto_amount:
              type: number
            total_netto_amount:
              type: number
  /statsExpectedPayouts:
    get:
      tags:
        - Statistics
      summary: 'Get expected payouts'
      description: 'Returns a list of expected payouts as displayed on the Digistore24 dashboard.'
      operationId: statsExpectedPayouts
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version: { type: string }
                  current_time: { type: string, format: date-time }
                  runtime_seconds: { type: number }
                  result: { type: string }
                  data: { type: object, properties: { total_earnings: { description: 'Internal reference: #/components/schemas/CurrencyAmounts' }, paidout_amount: { description: 'Circular reference to #/components/schemas/CurrencyAmounts' }, pending_amount: { description: 'Circular reference to #/components/schemas/CurrencyAmounts' }, future_amounts: { type: object, additionalProperties: { description: 'Internal reference: #/components/schemas/FutureAmount' } }, by_reseller: { type: array, items: { description: 'Internal reference: #/components/schemas/ResellerPayouts' } }, note: { description: 'Internal reference: #/components/schemas/PayoutNote' }, call_duration_ms: { type: object, additionalProperties: { type: number } } } }
      security:
        -
          api_key: {  }
    components:
      schemas:
        CurrencyAmounts:
          type: object
          additionalProperties:
            type: number
        FutureAmount:
          type: object
          additionalProperties:
            type: object
            properties:
              amount:
                type: number
              can_payout:
                type: string
                enum:
                  - 'Y'
                  - 'N'
              treshold:
                type: number
              note:
                type: string
        ResellerPayouts:
          type: object
          properties:
            reseller_id:
              type: integer
            reseller_name:
              type: string
            total_earnings:
              description: 'Circular reference to #/components/schemas/CurrencyAmounts'
            paidout_amount:
              description: 'Circular reference to #/components/schemas/CurrencyAmounts'
            pending_amount:
              description: 'Circular reference to #/components/schemas/CurrencyAmounts'
            future_amounts:
              type: object
              additionalProperties:
                description: 'Circular reference to #/components/schemas/FutureAmount'
        PayoutNote:
          type: object
          properties:
            message:
              type: string
            reasons:
              type: array
              items:
                type: object
                properties:
                  code: { type: string }
                  url: { type: string }
                  message: { type: string }
  /statsMarketplace:
    get:
      tags:
        - Statistics
      summary: 'Get marketplace statistics'
      description: |
        Returns the marketplace statistics.
      operationId: statsMarketplace
      parameters:
        -
          name: language
          in: query
          description: 'Language code (e.g., "de" - for a list of languages, see getGlobalSettings)'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, description: 'The marketplace statistics' }
      security:
        -
          ApiKeyAuth: {  }
  /statsSales:
    get:
      tags:
        - Statistics
      summary: 'Get sales statistics'
      description: |
        Returns a list of sales statistics for a specified period.
      operationId: statsSales
      parameters:
        -
          name: period
          in: query
          description: 'The time period for grouping sales data'
          required: false
          schema:
            type: string
            enum:
              - day
              - month
              - quarter
              - year
            default: week
        -
          name: from
          in: query
          description: 'Start date for the statistics (e.g., 2017-12-31)'
          required: false
          schema:
            type: string
            format: date
        -
          name: to
          in: query
          description: 'End date for the statistics'
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { amounts: { type: object, description: 'Sales amounts grouped by currency', additionalProperties: { type: array, items: { type: object, properties: { from: { type: string, format: date, description: 'Start date of the period' }, to: { type: string, format: date, description: 'End date of the period' }, vendor_share_amount: { type: number, description: 'Payout amount as vendor' }, vendor_brutto_amount: { type: number, description: 'Gross amount as vendor' }, vendor_netto_amount: { type: number, description: 'Net amount as vendor' }, affiliate_share_amount: { type: number, description: 'Payout amount as affiliate' }, affiliate_brutto_amount: { type: number, description: 'Gross amount as affiliate' }, affiliate_netto_amount: { type: number, description: 'Net amount as affiliate' }, other_share_amount: { type: number, description: 'Payout amount in other roles' }, other_brutto_amount: { type: number, description: 'Gross amount in other roles' }, other_netto_amount: { type: number, description: 'Net amount in other roles' }, total_share_amount: { type: number, description: 'Total payout amount' }, total_brutto_amount: { type: number, description: 'Total gross amount' }, total_netto_amount: { type: number, description: 'Total net amount' } } } } }, from: { type: string, format: date, description: 'Overall start date of the statistics' }, to: { type: string, format: date, description: 'Overall end date of the statistics' }, period: { type: string, enum: [day, month, quarter, year], description: 'The time period used for grouping' } } }
      security:
        -
          ApiKeyAuth: {  }
  /statsSalesSummary:
    get:
      tags:
        - Statistics
      summary: 'Get sales summary statistics'
      description: |
        Returns an overview of the revenue for different time periods.
      operationId: statsSalesSummary
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { for: { type: object, properties: { all: { type: object, description: 'Statistics for all time', properties: { from: { type: string, format: date, description: 'Start date of the period' }, to: { type: string, format: date, description: 'End date of the period' }, amounts: { type: object, description: 'Revenue amounts by currency', additionalProperties: { type: object, properties: { vendor_share_amount: { type: number, description: 'Payout amount as vendor' }, vendor_brutto_amount: { type: number, description: 'Gross amount as vendor' }, vendor_netto_amount: { type: number, description: 'Net amount as vendor' }, affiliate_share_amount: { type: number, description: 'Payout amount as affiliate' }, affiliate_brutto_amount: { type: number, description: 'Gross amount as affiliate' }, affiliate_netto_amount: { type: number, description: 'Net amount as affiliate' }, other_share_amount: { type: number, description: 'Payout amount in other roles' }, other_brutto_amount: { type: number, description: 'Gross amount in other roles' }, other_netto_amount: { type: number, description: 'Net amount in other roles' }, total_share_amount: { type: number, description: 'Total payout amount' }, total_brutto_amount: { type: number, description: 'Total gross amount' }, total_netto_amount: { type: number, description: 'Total net amount' } } } }, precentages: { type: object, description: 'Percentages relative to reference values' }, references: { type: object, description: 'Reference values for comparison' } } }, year: { type: object, description: 'Statistics for the current year' }, quarter: { type: object, description: 'Statistics for the current quarter' }, month: { type: object, description: 'Statistics for the current month' }, week: { type: object, description: 'Statistics for the current week' }, day: { type: object, description: 'Statistics for the current day' } } }, call_duration_ms: { type: object, description: 'Performance metrics for the API call', properties: { amount_for_all: { type: number, description: 'Time taken to calculate all-time statistics' }, amount_for_year: { type: number, description: 'Time taken to calculate year statistics' }, amount_for_quarter: { type: number, description: 'Time taken to calculate quarter statistics' }, amount_for_month: { type: number, description: 'Time taken to calculate month statistics' }, amount_for_week: { type: number, description: 'Time taken to calculate week statistics' }, amount_for_day: { type: number, description: 'Time taken to calculate day statistics' }, percentages: { type: number, description: 'Time taken to calculate percentages' }, total_call: { type: number, description: 'Total API call duration' } } } } }
      security:
        -
          ApiKeyAuth: {  }
  /stopRebilling:
    post:
      tags:
        - Purchases
      summary: 'Stop rebilling for a purchase'
      description: |
        Stops the recurring payments (for subscription and installment payments).
      operationId: stopRebilling
      parameters:
        -
          name: purchase_id
          in: query
          description: 'The Digistore24 order ID'
          required: true
          schema:
            type: string
        -
          name: force
          in: query
          description: |
            If possible, a rebilling is canceled immediately. If a minimum duration is specified, this will be adhered to by default (for force=false),
            meaning that it will be canceled at the end of the minimum duration. If force=true, it will be canceled immediately.
          required: false
          schema:
            type: boolean
            default: false
        -
          name: ignore_refund_possibility
          in: query
          description: |
            If false (default), the purchase is cancelled effective immediately if a refund is possible.
            If true, the cancellation becomes effective at the end of the regular cancellation period.
            The parameter is ignored if force=true.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { modified: { type: string, enum: ['Y', 'N'], description: 'Indicates whether the rebilling was modified' }, note: { type: string, description: 'Note text on the outcome' }, code: { type: string, enum: [stopped_now, stopped_later, stopped_manual_rebilling], description: 'A code indicating the outcome' }, billing_status: { type: string, enum: [paying, aborted, unpaid, reminding, completed], description: 'Current billing status' }, billing_status_msg: { type: string, description: 'Human-readable billing status message' }, next_payment_at: { type: string, format: date-time, description: 'Date of the next payment (e.g., "2015-12-31 14:47:00") or empty' }, rebilling_active: { type: string, enum: ['Y', 'N'], description: 'Whether rebilling is still active' }, is_cancelled_now: { type: string, enum: ['Y', 'N'], description: 'Whether the order is canceled immediately' }, is_cancelled_later: { type: string, enum: ['Y', 'N'], description: 'Whether the order is canceled on the date can_cancel_before' }, can_cancel_before: { type: string, format: date, description: 'For minimum duration, the earliest possible regular cancellation date (e.g., "2017-12-03"). Otherwise empty.' } } }
      security:
        -
          ApiKeyAuth: {  }
  /unregister:
    delete:
      tags:
        - 'API Keys'
      summary: 'Unregister API key'
      description: |
        Deletes the current API key if it was created interactively.
      operationId: unregister
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { modified: { type: string, enum: ['Y', 'N'], description: 'Indicates whether the API key was deleted' }, note: { type: string, description: 'Note text on the outcome' } } }
      security:
        -
          ApiKeyAuth: {  }
  /updateAffiliateCommission:
    put:
      tags:
        - Affiliates
      summary: 'Update affiliate commission'
      description: |
        Changes the affiliate commission(s) for one or more products.
        If product_ids is not "all" and no affiliations have been set up for some products, then they will be recreated.
      operationId: updateAffiliateCommission
      parameters:
        -
          name: affiliate_id
          in: query
          description: 'The ID or the name of the affiliate'
          required: true
          schema:
            type: string
        -
          name: product_ids
          in: query
          description: 'Comma-separated list of product IDs for which the commission should be changed, or "all" for all products'
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                commission_rate:
                  type: number
                  format: float
                  description: 'Percentage of the affiliate commission'
                commission_fix:
                  type: number
                  format: float
                  description: 'Commission amount (in the specified currency)'
                commission_currency:
                  type: string
                  description: 'Currency of the commission amount (if specified)'
                approval_status:
                  type: string
                  enum: [new, approved, rejected, pending]
                  description: 'Approval status of the affiliation'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, description: 'Empty response on success' }
      security:
        -
          ApiKeyAuth: {  }
  /updateBuyer:
    put:
      tags:
        - Buyers
      summary: 'Update a buyer'
      description: |
        Updates the buyer's contact details.
      operationId: updateBuyer
      parameters:
        -
          name: buyer_id
          in: query
          description: 'The buyer ID, as returned by e.g. getPurchase'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: "Buyer's email address"
                first_name:
                  type: string
                  description: "Buyer's first name"
                last_name:
                  type: string
                  description: "Buyer's last name"
                salutation:
                  type: string
                  enum: ['', M, F]
                  description: "Buyer's salutation (empty, M or F)"
                title:
                  type: string
                  description: "Buyer's title"
                company:
                  type: string
                  description: "Buyer's company name"
                street_name:
                  type: string
                  description: 'Street name'
                street_number:
                  type: string
                  description: 'Street number'
                phone_number:
                  type: string
                  description: 'Phone number (can be overwritten with an empty string)'
                city:
                  type: string
                  description: City
                zipcode:
                  type: string
                  description: 'ZIP/Postal code'
                state:
                  type: string
                  description: State/Province
                country:
                  type: string
                  description: 'Two-digit ISO country code (e.g., DE or AT)'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { is_modified: { type: string, enum: ['Y', 'N'], description: 'Indicates whether the buyer was modified' } } }
      security:
        -
          ApiKeyAuth: {  }
  /updateDelivery:
    put:
      tags:
        - Deliveries
      summary: 'Update a delivery'
      description: |
        Updates a delivery record with new status, tracking information, and other details.
      operationId: updateDelivery
      parameters:
        -
          name: delivery_id
          in: query
          description: 'The ID of the delivery to update'
          required: true
          schema:
            type: integer
        -
          name: notify_via_email
          in: query
          description: 'Whether to notify the buyer via email about the delivery update'
          required: false
          schema:
            type: boolean
            default: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties: { type: { type: string, enum: [request, in_progress, delivery, partial_delivery, return, cancel], description: 'The type of delivery status' }, is_shipped: { type: boolean, description: "Y = The product has been shipped (type is set to 'delivery'), N = The delivery was cancelled (type is set to 'cancel')" }, quantity_delivered: { type: integer, description: 'Sets the delivery quantity to the given value' }, add_quantity_delivered: { type: integer, description: 'Adds the given value to the delivery quantity' }, is_shipped_by_reseller_from: { type: string, description: 'If you are a fulfillment center, set this parameter to your code if is_shippment_by_reseller_id is set for a delivery' } }
                tracking:
                  type: array
                  description: 'List of tracking information'
                  items: { type: object, properties: { parcel_service: { type: string, description: 'The parcel service key (see https://www.digistore24.com/support/parcel_services)' }, tracking_id: { type: string, description: 'The tracking ID for the shipment' }, expect_delivery_at: { type: string, format: date, description: 'Expected delivery date' }, quantity: { type: integer, description: 'Quantity of items in this tracking entry (default is all items)' }, operation: { type: string, enum: [create_or_update, delete], default: create_or_update, description: 'Operation to perform on the tracking information' } } }
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { is_modified: { type: string, enum: ['Y', 'N'], description: 'Indicates whether the delivery was modified' } } }
      security:
        -
          ApiKeyAuth: {  }
  /updateOrderform:
    put:
      tags:
        - 'Order Forms'
      summary: 'Update an order form'
      description: |
        Changes an existing order form on Digistore24.
      operationId: updateOrderform
      parameters:
        -
          name: orderform_id
          in: query
          description: 'The ID of the order form to update'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the order form'
                product_id:
                  type: integer
                  description: 'ID of the product associated with this order form'
                paymentplan_id:
                  type: integer
                  description: 'ID of the payment plan to use'
                is_active:
                  type: boolean
                  description: 'Whether the order form is active'
                is_default:
                  type: boolean
                  description: 'Whether this is the default order form for the product'
                theme:
                  type: string
                  description: 'Theme of the order form'
                language:
                  type: string
                  description: 'Language code for the order form'
                custom_css:
                  type: string
                  description: 'Custom CSS for the order form'
                custom_js:
                  type: string
                  description: 'Custom JavaScript for the order form'
                custom_html:
                  type: string
                  description: 'Custom HTML for the order form'
                custom_fields:
                  type: array
                  description: 'Custom fields configuration'
                  items: { type: object }
                upsell_settings:
                  type: object
                  description: 'Settings for upsells'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { is_modified: { type: string, enum: ['Y', 'N'], description: 'Indicates whether the order form was modified' } } }
      security:
        -
          ApiKeyAuth: {  }
  /updatePaymentplan:
    put:
      tags:
        - 'Payment Plans'
      summary: 'Update a payment plan'
      description: |
        Modifies a payment plan for a product on Digistore24.
      operationId: updatePaymentplan
      parameters:
        -
          name: paymentplan_id
          in: query
          description: 'The ID of the payment plan to update'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_amount:
                  type: number
                  format: float
                  description: 'The amount for the first payment'
                first_billing_interval:
                  type: string
                  description: 'The billing interval for the first payment'
                currency:
                  type: string
                  description: 'The currency code for the payment plan (e.g., USD, EUR)'
                other_amounts:
                  type: number
                  format: float
                  description: 'The amount for subsequent payments'
                other_billing_intervals:
                  type: string
                  description: 'The billing interval for subsequent payments'
                number_of_installments:
                  type: integer
                  description: 'The number of installments (0 for subscription, 1 for single payment, >=2 for installment plan)'
                is_active:
                  type: boolean
                  description: 'Whether the payment plan is active'
                cancel_policy:
                  type: string
                  enum: [6m_0, 6m_6m, 6m_12m, 12m_0, 12m_3m, 12m_6m, 12m_12m, 24m_0, 24m_6m, 24m_12m]
                  description: 'The cancellation policy (minimum term) for the payment plan'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { is_modified: { type: string, enum: ['Y', 'N'], description: 'Indicates whether the payment plan was modified' } } }
      security:
        -
          ApiKeyAuth: {  }
  /updateProduct:
    put:
      tags:
        - Products
      summary: 'Update a product'
      description: |
        Modifies a user's product on Digistore24.
      operationId: updateProduct
      parameters:
        -
          name: product_id
          in: query
          description: 'The Digistore24 product ID'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name_de:
                  type: string
                  maxLength: 63
                  description: 'Product name in German'
                name_en:
                  type: string
                  maxLength: 63
                  description: 'Product name in English'
                name_es:
                  type: string
                  maxLength: 63
                  description: 'Product name in Spanish'
                name_intern:
                  type: string
                  maxLength: 63
                  description: 'Internal product name'
                description_de:
                  type: string
                  description: 'Product description in German (filtered HTML)'
                description_en:
                  type: string
                  description: 'Product description in English (filtered HTML)'
                description_es:
                  type: string
                  description: 'Product description in Spanish (filtered HTML)'
                salespage_url:
                  type: string
                  maxLength: 255
                  description: 'URL of the sales page'
                upsell_salespage_url:
                  type: string
                  maxLength: 255
                  description: 'URL of the upsell sales page'
                thankyou_url:
                  type: string
                  maxLength: 255
                  description: 'URL of the thank you page'
                image_url:
                  type: string
                  maxLength: 255
                  description: 'URL of the product image'
                product_type_id:
                  type: integer
                  description: 'Product type ID (call getGlobalSettings for valid product type IDs)'
                currency:
                  type: string
                  description: 'List of possible currencies for payments for this product (e.g., USD,EUR)'
                approval_status:
                  type: string
                  enum: [new, pending]
                  description: 'Approval status (applies to all resellers of the vendor)'
                affiliate_commision:
                  type: number
                  format: float
                  description: 'Commission for affiliates'
                buyer_type:
                  type: string
                  enum: [consumer, business]
                  description: 'consumer = prices include VAT, business = prices exclude VAT'
                is_address_input_mandatory:
                  type: boolean
                  description: 'Y = buyer must always enter their address, N = buyer must only enter address if required for delivery'
                add_order_data_to_thankyou_page_url:
                  type: boolean
                  description: 'Y = order data is added to URL when directing buyer to thank you page, N = no order data is added'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { modified: { type: string, enum: ['Y', 'N'], description: 'Indicates whether the product was modified' } } }
      security:
        -
          ApiKeyAuth: {  }
  /updateProductGroup:
    put:
      tags:
        - Products
      summary: 'Update a product group'
      description: |
        Updates a product group. Product groups are folders for products that help maintain an overview of many products.
      operationId: updateProductGroup
      parameters:
        -
          name: product_group_id
          in: query
          description: 'The ID of the product group to update'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 31
                  description: 'Product group name. Maximum 31 characters.'
                position:
                  type: integer
                  default: 10
                  description: 'The display order.'
                is_shown_as_tab:
                  type: boolean
                  description: 'If true, the group is displayed as a tab in the product list.'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { is_modified: { type: string, enum: ['Y', 'N'], description: 'Indicates whether the product group was modified' } } }
      security:
        -
          ApiKeyAuth: {  }
  /updatePurchase:
    put:
      tags:
        - Purchases
      summary: 'Update a purchase'
      description: |
        Changes the tracking data of an order.
      operationId: updatePurchase
      parameters:
        -
          name: purchase_id
          in: query
          description: 'The ID of the purchase to update'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tracking_param:
                  type: string
                  description: "The vendor's tracking key"
                custom:
                  type: string
                  description: 'The custom field'
                unlock_invoices:
                  type: boolean
                  description: 'If true, access to order details and invoices will be granted to the buyer. Invoice and order details links will then work again. By default, access expires after 3 years.'
                next_payment_at:
                  type: string
                  format: date-time
                  description: "Extend the rebilling payment interval. Use this to grant the buyer a payment pause. It's not possible to shorten the payment intervals."
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { is_modified: { type: string, enum: ['Y', 'N'], description: 'Indicates whether the purchase was modified' } } }
      security:
        -
          ApiKeyAuth: {  }
  /updateServiceProofRequest:
    put:
      tags:
        - 'Service Proofs'
      summary: 'Update a service proof request'
      description: |
        Provides proof that a service was delivered to a buyer when requested by Digistore24.
        This is typically used when a buyer requests a refund, and Digistore24 needs verification
        that the service was actually provided.
      operationId: updateServiceProofRequest
      parameters:
        -
          name: service_proof_id
          in: query
          description: 'The ID of the service proof request to update'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required: [request_status]
                  properties: { request_status: { type: string, enum: [proof_provided, exec_refund], description: 'Status of the request - either providing proof or executing the refund' }, message: { type: string, description: 'Additional message or explanation about the proof or refund decision' } }
                files:
                  type: array
                  description: 'Array of files that serve as proof of service delivery'
                  items: { type: object, required: [url], properties: { url: { type: string, description: 'Download URL for file contents' }, filename: { type: string, description: 'Optional filename for the file' } } }
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { is_modified: { type: string, enum: ['Y', 'N'], description: 'Indicates whether the service proof request was modified' } } }
      security:
        -
          ApiKeyAuth: {  }
  /updateShippingCostPolicy:
    put:
      tags:
        - Shipping
      summary: 'Update a shipping cost policy'
      description: |
        Updates an existing shipping cost policy with new settings.
      operationId: updateShippingCostPolicy
      parameters:
        -
          name: policy_id
          in: query
          description: 'The ID of the shipping cost policy to update'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 63
                  description: 'Name of the shipping cost policy'
                label_XX:
                  type: string
                  maxLength: 63
                  description: 'Label on order form. Replace XX by the desired language code (e.g., label_en, label_de)'
                position:
                  type: integer
                  default: 100
                  description: 'Display position of the policy'
                is_active:
                  type: boolean
                  default: true
                  description: 'Whether the policy is active'
                for_product_ids:
                  type: string
                  description: 'Comma-separated list of product IDs this policy applies to. Default is "all"'
                for_countries:
                  type: string
                  description: 'Comma-separated list of two-character ISO country codes this policy applies to (e.g., US,CA,UK). Default is "all"'
                for_currencies:
                  type: string
                  description: 'Comma-separated list of three-character currency codes this policy applies to (e.g., USD,EUR). Default is "all"'
                fee_type:
                  type: string
                  enum: [total_fee, fee_per_unit]
                  description: 'Type of fee calculation'
                billing_cycle:
                  type: string
                  enum: [once, monthly]
                  description: 'When the shipping fee is charged'
                currency:
                  type: string
                  description: 'Currency of the shipping fees (e.g., USD, EUR)'
                scale_level_count:
                  type: integer
                  minimum: 1
                  maximum: 5
                  default: 1
                  description: 'Number of discount levels (1-5)'
                scale_1_amount:
                  type: number
                  format: float
                  description: 'Shipping cost amount for the first level'
                scale_2_from:
                  type: integer
                  description: 'Number of items for second discount level'
                scale_2_amount:
                  type: number
                  format: float
                  description: 'Shipping cost amount for scale_2_from or more items'
                scale_3_from:
                  type: integer
                  description: 'Number of items for third discount level'
                scale_3_amount:
                  type: number
                  format: float
                  description: 'Shipping cost amount for scale_3_from or more items'
                scale_4_from:
                  type: integer
                  description: 'Number of items for fourth discount level'
                scale_4_amount:
                  type: number
                  format: float
                  description: 'Shipping cost amount for scale_4_from or more items'
                scale_5_from:
                  type: integer
                  description: 'Number of items for fifth discount level'
                scale_5_amount:
                  type: number
                  format: float
                  description: 'Shipping cost amount for scale_5_from or more items'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { is_modified: { type: string, enum: ['Y', 'N'], description: 'Indicates whether the shipping cost policy was modified' } } }
      security:
        -
          ApiKeyAuth: {  }
  /updateUpsells:
    put:
      tags:
        - Products
      summary: 'Update upsells for a product'
      description: |
        Saves the upsells configuration for a Digistore24 product.
      operationId: updateUpsells
      parameters:
        -
          name: product_id
          in: query
          description: 'The numerical ID of the product'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: 'An associative array of upsell positions and product IDs - as returned by getUpsells'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { is_modified: { type: string, enum: ['Y', 'N'], description: 'Indicates whether the upsell tree has been changed' } } }
      security:
        -
          ApiKeyAuth: {  }
  /updateVoucher:
    put:
      tags:
        - Vouchers
      summary: 'Update a voucher'
      description: |
        Updates an existing voucher code with new settings.
      operationId: updateVoucher
      parameters:
        -
          name: code
          in: query
          description: 'The voucher code or voucher ID to update'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: 'The voucher code'
                product_ids:
                  type: string
                  description: '"all" or a comma-separated list of product IDs for which this voucher code is valid'
                valid_from:
                  type: string
                  format: date-time
                  description: 'Time from when the code is valid (e.g. 2017-12-31 12:00:00). Leave empty to remove a start time.'
                expires_at:
                  type: string
                  format: date-time
                  description: 'Time when the code becomes invalid. Leave empty to remove an end time.'
                first_rate:
                  type: number
                  description: 'The discount in percent on the first payment (for subscription and installment payments) or on the purchase amount for a single payment'
                other_rates:
                  type: number
                  description: 'The discount in percent on the follow-up payments (for subscription and installment payments)'
                first_amount:
                  type: number
                  description: 'The discount as a fixed amount on the first payment/single payment'
                other_amounts:
                  type: number
                  description: 'The discount as a fixed amount on the follow-up payments'
                currency:
                  type: string
                  description: 'Currency of the discount amounts'
                is_count_limited:
                  type: boolean
                  description: 'For FALSE (default), the code can be used without limit. For TRUE, usage is limited.'
                count_left:
                  type: integer
                  description: 'If is_count_limited is TRUE, the number of times it can still be used. Default is 1.'
                upgrade_policy:
                  type: string
                  enum: [valid, other_only, not_valid]
                  description: 'Determines how the code is used for upgrades'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { discount_code_id: { type: integer, description: 'ID of the updated voucher' }, code: { type: string, description: 'The voucher code' }, modified: { type: string, enum: ['Y', 'N'], description: 'Whether the voucher was modified' } } }
      security:
        -
          ApiKeyAuth: {  }
  /validateAffiliate:
    get:
      tags:
        - Affiliates
      summary: 'Validate an affiliate'
      description: |
        Checks if there is an affiliation for an affiliate and one or more products.
        Returns the same information as when setting up an order form (where the affiliate name is displayed at the bottom).
      operationId: validateAffiliate
      parameters:
        -
          name: affiliate_name
          in: query
          description: 'The Digistore24 ID of the affiliate'
          required: true
          schema:
            type: string
        -
          name: product_ids
          in: query
          description: 'One or more product IDs, separated by commas (e.g., 11,22,33,44). All product IDs must belong to the same vendor.'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { have_affiliation: { type: string, enum: ['Y', 'N'], description: 'Y if the affiliation exists and has been approved for all specified products, N otherwise' }, affiliation_status: { type: string, enum: [approved, no_affiliation, wait_for_approval, no_valid_products], description: 'Status of the affiliation' }, invalid_affiliate_name: { type: boolean, description: 'True if the affiliate name is not valid' }, affiliation_status_msg: { type: string, description: 'Human-readable status message' }, invite_url: { type: string, description: 'URL via which the affiliation can be initiated' }, valid_product_ids: { type: string, description: 'Comma-separated list of valid product IDs' }, invalid_product_ids: { type: string, description: 'Comma-separated list of invalid product IDs' } } }
      security:
        -
          ApiKeyAuth: {  }
  /validateCouponCode:
    get:
      tags:
        - Vouchers
      summary: 'Validate a coupon code'
      description: |
        Checks if a voucher code is valid and returns information about the voucher.
      operationId: validateCouponCode
      parameters:
        -
          name: code
          in: query
          description: 'The voucher code or voucher ID to validate'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { status: { type: string, enum: [success, error], description: 'Status of the validation' }, status_msg: { type: string, description: 'Human-readable status message' }, currency: { type: string, description: 'Currency code of the voucher' }, coupon_id: { type: integer, description: 'ID of the voucher' }, amount_left: { type: number, description: 'Remaining amount that can be used from this voucher' }, amount_total: { type: number, description: 'Total amount of the voucher' }, is_test_payment: { type: string, enum: ['Y', 'N'], description: 'Whether the voucher can only be used for test payments (Y) or real payments (N)' } } }
      security:
        -
          ApiKeyAuth: {  }
  /validateEticket:
    get:
      tags:
        - E-Tickets
      summary: 'Validate an e-ticket'
      description: |
        Validates an e-ticket against specified template, location, and date parameters.
        If valid, marks the e-ticket as used.
      operationId: validateEticket
      parameters:
        -
          name: eticket_id
          in: query
          description: 'The e-ticket serial number or ID to validate'
          required: true
          schema:
            type: string
        -
          name: template_id
          in: query
          description: 'The template ID or comma-separated list of template IDs'
          required: true
          schema:
            type: string
        -
          name: location_id
          in: query
          description: 'The location ID or comma-separated list of location IDs'
          required: true
          schema:
            type: string
        -
          name: date
          in: query
          description: 'The date or comma-separated list of dates to validate against (default is current date)'
          required: false
          schema:
            type: string
            default: now
        -
          name: seperator
          in: query
          description: 'The separator character used in the response message'
          required: false
          schema:
            type: string
            default: ' '
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { status: { type: string, enum: [success, error], description: 'Status of the validation' }, msg: { type: string, description: 'Human-readable status message' }, eticket_location_id: { type: integer, description: 'Location ID of the e-ticket' }, eticket_template_id: { type: integer, description: 'Template ID of the e-ticket' }, eticket_date: { type: string, format: date, description: 'Date of the e-ticket' }, is_eticket_valid_for_different_event: { type: string, enum: ['Y', 'N'], description: 'Whether the e-ticket is valid for a different event' }, valid_ticket_count: { type: integer, description: 'Count of valid tickets for the specified template, location, and date' }, used_ticket_count: { type: integer, description: 'Count of used tickets for the specified template, location, and date' } } }
      security:
        -
          ApiKeyAuth: {  }
  /validateLicenseKey:
    get:
      tags:
        - Licenses
      summary: 'Validate a license key'
      description: |
        Validates a license key against a purchase and returns detailed information about the license status.
      operationId: validateLicenseKey
      parameters:
        -
          name: purchase_id
          in: query
          description: 'The purchase ID to validate the license key against'
          required: true
          schema:
            type: string
        -
          name: license_key
          in: query
          description: 'The license key to validate'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: object, properties: { is_license_valid: { type: string, enum: ['Y', 'N'], description: 'Whether the license key is valid and the purchase can be delivered' }, is_license_key_found: { type: string, enum: ['Y', 'N'], description: 'Whether the license key was found in the purchase' }, purchase_id: { type: string, description: 'The purchase ID' }, license_key: { type: string, description: 'The found license key' }, product_id: { type: integer, description: 'The product ID' }, product_name: { type: string, description: 'The product name' }, billing_tatus: { type: string, description: 'The billing status code' }, billing_tatus_msg: { type: string, description: 'Human-readable billing status message' }, last_payment_at: { type: string, format: date-time, description: 'Date and time of the last payment' }, last_payment_at_msg: { type: string, description: 'Formatted date of the last payment' }, next_payment_at: { type: string, format: date-time, description: 'Date and time of the next payment' }, next_payment_at_msg: { type: string, description: 'Formatted date of the next payment' }, last_transaction_type: { type: string, description: 'The last transaction type code' }, last_transaction_type_msg: { type: string, description: 'Human-readable last transaction type' }, paid_until: { type: string, format: date, description: 'Date until which the subscription is paid (for recurring payments)' }, paid_until_msg: { type: string, description: 'Formatted date until which the subscription is paid' } } }
      security:
        -
          ApiKeyAuth: {  }
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-DS-API-KEY
